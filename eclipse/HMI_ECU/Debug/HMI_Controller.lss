
HMI_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003440  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  00003440  000034d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000f4  008000f4  00003568  2**0
                  ALLOC
  3 .stab         00002cf4  00000000  00000000  00003568  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001117  00000000  00000000  0000625c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007373  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000074b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007623  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000926c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a157  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000af04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b064  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b2f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000babf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__vector_7>
      20:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__vector_8>
      24:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 ef       	ldi	r26, 0xF4	; 244
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3f       	cpi	r26, 0xF8	; 248
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ee       	ldi	r26, 0xEC	; 236
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 be 19 	jmp	0x337c	; 0x337c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c ee       	ldi	r24, 0xEC	; 236
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 be 19 	jmp	0x337c	; 0x337c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
uint8 checkPassword();
void timerTick();
uint16 gtime;

int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType uartConfig;
	/* a variable to store Timer1 configuration */
	Timer1_ConfigType timerConfig;

	/* UART configuration and initialization */
	uartConfig.baud_rate = 9600;
     b5a:	80 e8       	ldi	r24, 0x80	; 128
     b5c:	95 e2       	ldi	r25, 0x25	; 37
     b5e:	9f 83       	std	Y+7, r25	; 0x07
     b60:	8e 83       	std	Y+6, r24	; 0x06
	uartConfig.bit_data = EIGHT_BITS;
     b62:	83 e0       	ldi	r24, 0x03	; 3
     b64:	8b 83       	std	Y+3, r24	; 0x03
	uartConfig.parity = DISABLED;
     b66:	1c 82       	std	Y+4, r1	; 0x04
	uartConfig.stop_bit = ONE_BIT;
     b68:	1d 82       	std	Y+5, r1	; 0x05
	UART_init(&uartConfig);
     b6a:	ce 01       	movw	r24, r28
     b6c:	03 96       	adiw	r24, 0x03	; 3
     b6e:	0e 94 8e 18 	call	0x311c	; 0x311c <UART_init>

	/* Timer1 configuration without initialization
	 * configured to give interrupt every 7.5 seconds */
	timerConfig.initial_value = 0;
     b72:	19 86       	std	Y+9, r1	; 0x09
     b74:	18 86       	std	Y+8, r1	; 0x08
	timerConfig.mode = COMPARE;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	8d 87       	std	Y+13, r24	; 0x0d
	timerConfig.compare_value = 58593;
     b7a:	81 ee       	ldi	r24, 0xE1	; 225
     b7c:	94 ee       	ldi	r25, 0xE4	; 228
     b7e:	9b 87       	std	Y+11, r25	; 0x0b
     b80:	8a 87       	std	Y+10, r24	; 0x0a
	timerConfig.prescaler = CLK_1024;
     b82:	85 e0       	ldi	r24, 0x05	; 5
     b84:	8c 87       	std	Y+12, r24	; 0x0c
	Timer1_setCallBack(timerTick);
     b86:	8a e7       	ldi	r24, 0x7A	; 122
     b88:	96 e0       	ldi	r25, 0x06	; 6
     b8a:	0e 94 54 09 	call	0x12a8	; 0x12a8 <Timer1_setCallBack>

	LCD_init();
     b8e:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <LCD_init>
	SREG |= (1 << 7);
     b92:	af e5       	ldi	r26, 0x5F	; 95
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	ef e5       	ldi	r30, 0x5F	; 95
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	80 68       	ori	r24, 0x80	; 128
     b9e:	8c 93       	st	X, r24


	uint8 ready= UART_recieveByte();
     ba0:	0e 94 05 19 	call	0x320a	; 0x320a <UART_recieveByte>
     ba4:	89 83       	std	Y+1, r24	; 0x01
     ba6:	06 c0       	rjmp	.+12     	; 0xbb4 <main+0x6e>
	while(ready!=readybyte)
	{
		UART_sendByte(0x70);
     ba8:	80 e7       	ldi	r24, 0x70	; 112
     baa:	0e 94 ee 18 	call	0x31dc	; 0x31dc <UART_sendByte>
		ready=UART_recieveByte();
     bae:	0e 94 05 19 	call	0x320a	; 0x320a <UART_recieveByte>
     bb2:	89 83       	std	Y+1, r24	; 0x01
	LCD_init();
	SREG |= (1 << 7);


	uint8 ready= UART_recieveByte();
	while(ready!=readybyte)
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	86 36       	cpi	r24, 0x66	; 102
     bb8:	b9 f7       	brne	.-18     	; 0xba8 <main+0x62>
	{
		UART_sendByte(0x70);
		ready=UART_recieveByte();
	}
	/*setpassward for the first time*/
	while (setPassword() == unmatchedpassword)
     bba:	0e 94 a3 07 	call	0xf46	; 0xf46 <setPassword>
     bbe:	84 36       	cpi	r24, 0x64	; 100
     bc0:	e1 f3       	breq	.-8      	; 0xbba <main+0x74>
		;

	while (1)
	{

		LCD_clearScreen();
     bc2:	0e 94 84 18 	call	0x3108	; 0x3108 <LCD_clearScreen>
		LCD_displayString("+ : Open Door");
     bc6:	80 e6       	ldi	r24, 0x60	; 96
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "- : Change Pass");
     bce:	2e e6       	ldi	r18, 0x6E	; 110
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	a9 01       	movw	r20, r18
     bd8:	0e 94 48 18 	call	0x3090	; 0x3090 <LCD_displayStringRowColumn>

		do
		{
			key = KEYPAD_getPressedKey();
     bdc:	0e 94 a4 0c 	call	0x1948	; 0x1948 <KEYPAD_getPressedKey>
     be0:	8a 83       	std	Y+2, r24	; 0x02
		}while(key != '+' && key != '-');
     be2:	8a 81       	ldd	r24, Y+2	; 0x02
     be4:	8b 32       	cpi	r24, 0x2B	; 43
     be6:	19 f0       	breq	.+6      	; 0xbee <main+0xa8>
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	8d 32       	cpi	r24, 0x2D	; 45
     bec:	b9 f7       	brne	.-18     	; 0xbdc <main+0x96>

		if (checkPassword() == matchedpassword)
     bee:	0e 94 0b 08 	call	0x1016	; 0x1016 <checkPassword>
     bf2:	85 36       	cpi	r24, 0x65	; 101
     bf4:	09 f0       	breq	.+2      	; 0xbf8 <main+0xb2>
     bf6:	50 c0       	rjmp	.+160    	; 0xc98 <main+0x152>
		{
			switch (key)
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	3f 87       	std	Y+15, r19	; 0x0f
     c00:	2e 87       	std	Y+14, r18	; 0x0e
     c02:	8e 85       	ldd	r24, Y+14	; 0x0e
     c04:	9f 85       	ldd	r25, Y+15	; 0x0f
     c06:	8b 32       	cpi	r24, 0x2B	; 43
     c08:	91 05       	cpc	r25, r1
     c0a:	31 f0       	breq	.+12     	; 0xc18 <main+0xd2>
     c0c:	2e 85       	ldd	r18, Y+14	; 0x0e
     c0e:	3f 85       	ldd	r19, Y+15	; 0x0f
     c10:	2d 32       	cpi	r18, 0x2D	; 45
     c12:	31 05       	cpc	r19, r1
     c14:	e1 f1       	breq	.+120    	; 0xc8e <main+0x148>
     c16:	d5 cf       	rjmp	.-86     	; 0xbc2 <main+0x7c>
			{
			case '+':
				UART_sendByte(openDoorcmd);
     c18:	89 e5       	ldi	r24, 0x59	; 89
     c1a:	0e 94 ee 18 	call	0x31dc	; 0x31dc <UART_sendByte>
				while( UART_recieveByte()!=openDoorcmd);
     c1e:	0e 94 05 19 	call	0x320a	; 0x320a <UART_recieveByte>
     c22:	89 35       	cpi	r24, 0x59	; 89
     c24:	e1 f7       	brne	.-8      	; 0xc1e <main+0xd8>
				LCD_clearScreen();
     c26:	0e 94 84 18 	call	0x3108	; 0x3108 <LCD_clearScreen>
				LCD_displayString("    Door is");
     c2a:	8e e7       	ldi	r24, 0x7E	; 126
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_displayString>
				LCD_displayStringRowColumn(1,3,"unlocking");
     c32:	2a e8       	ldi	r18, 0x8A	; 138
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	63 e0       	ldi	r22, 0x03	; 3
     c3a:	a9 01       	movw	r20, r18
     c3c:	0e 94 48 18 	call	0x3090	; 0x3090 <LCD_displayStringRowColumn>
				while( UART_recieveByte()!=opened);
     c40:	0e 94 05 19 	call	0x320a	; 0x320a <UART_recieveByte>
     c44:	80 38       	cpi	r24, 0x80	; 128
     c46:	e1 f7       	brne	.-8      	; 0xc40 <main+0xfa>
				LCD_clearScreen();
     c48:	0e 94 84 18 	call	0x3108	; 0x3108 <LCD_clearScreen>
				LCD_displayString("    Door is");
     c4c:	8e e7       	ldi	r24, 0x7E	; 126
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_displayString>
				LCD_displayStringRowColumn(1,5,"open");
     c54:	24 e9       	ldi	r18, 0x94	; 148
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	65 e0       	ldi	r22, 0x05	; 5
     c5c:	a9 01       	movw	r20, r18
     c5e:	0e 94 48 18 	call	0x3090	; 0x3090 <LCD_displayStringRowColumn>
				while( UART_recieveByte()!=locked);
     c62:	0e 94 05 19 	call	0x320a	; 0x320a <UART_recieveByte>
     c66:	81 38       	cpi	r24, 0x81	; 129
     c68:	e1 f7       	brne	.-8      	; 0xc62 <main+0x11c>
				LCD_clearScreen();
     c6a:	0e 94 84 18 	call	0x3108	; 0x3108 <LCD_clearScreen>
				LCD_displayString("    Door is");
     c6e:	8e e7       	ldi	r24, 0x7E	; 126
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_displayString>
				LCD_displayStringRowColumn(1,4,"locking");
     c76:	29 e9       	ldi	r18, 0x99	; 153
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	64 e0       	ldi	r22, 0x04	; 4
     c7e:	a9 01       	movw	r20, r18
     c80:	0e 94 48 18 	call	0x3090	; 0x3090 <LCD_displayStringRowColumn>
				while( UART_recieveByte()!=readybyte);
     c84:	0e 94 05 19 	call	0x320a	; 0x320a <UART_recieveByte>
     c88:	86 36       	cpi	r24, 0x66	; 102
     c8a:	e1 f7       	brne	.-8      	; 0xc84 <main+0x13e>
     c8c:	9a cf       	rjmp	.-204    	; 0xbc2 <main+0x7c>
				break;

			case'-':
				while (setPassword() == unmatchedpassword);
     c8e:	0e 94 a3 07 	call	0xf46	; 0xf46 <setPassword>
     c92:	84 36       	cpi	r24, 0x64	; 100
     c94:	e1 f3       	breq	.-8      	; 0xc8e <main+0x148>
     c96:	95 cf       	rjmp	.-214    	; 0xbc2 <main+0x7c>
				break;
			}
		}
		else
		{
			LCD_clearScreen();
     c98:	0e 94 84 18 	call	0x3108	; 0x3108 <LCD_clearScreen>
			LCD_displayString("     Wrong Pass");
     c9c:	81 ea       	ldi	r24, 0xA1	; 161
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_displayString>
			LCD_displayStringRowColumn(1, 3, "Door is locked");
     ca4:	21 eb       	ldi	r18, 0xB1	; 177
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	63 e0       	ldi	r22, 0x03	; 3
     cac:	a9 01       	movw	r20, r18
     cae:	0e 94 48 18 	call	0x3090	; 0x3090 <LCD_displayStringRowColumn>
			UART_sendByte(Buzzeron);
     cb2:	82 e6       	ldi	r24, 0x62	; 98
     cb4:	0e 94 ee 18 	call	0x31dc	; 0x31dc <UART_sendByte>
			while(UART_recieveByte()!=readybyte);
     cb8:	0e 94 05 19 	call	0x320a	; 0x320a <UART_recieveByte>
     cbc:	86 36       	cpi	r24, 0x66	; 102
     cbe:	e1 f7       	brne	.-8      	; 0xcb8 <main+0x172>
			gtime = 8;
     cc0:	88 e0       	ldi	r24, 0x08	; 8
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	90 93 f7 00 	sts	0x00F7, r25
     cc8:	80 93 f6 00 	sts	0x00F6, r24
			Timer1_init(&timerConfig);
     ccc:	ce 01       	movw	r24, r28
     cce:	08 96       	adiw	r24, 0x08	; 8
     cd0:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <Timer1_init>
			while (gtime) ;
     cd4:	80 91 f6 00 	lds	r24, 0x00F6
     cd8:	90 91 f7 00 	lds	r25, 0x00F7
     cdc:	00 97       	sbiw	r24, 0x00	; 0
     cde:	d1 f7       	brne	.-12     	; 0xcd4 <main+0x18e>
			Timer1_deInit();
     ce0:	0e 94 31 09 	call	0x1262	; 0x1262 <Timer1_deInit>
			UART_sendByte(Buzzeroff);
     ce4:	83 e6       	ldi	r24, 0x63	; 99
     ce6:	0e 94 ee 18 	call	0x31dc	; 0x31dc <UART_sendByte>
			while(UART_recieveByte()!=buzzercheck);
     cea:	0e 94 05 19 	call	0x320a	; 0x320a <UART_recieveByte>
     cee:	80 39       	cpi	r24, 0x90	; 144
     cf0:	e1 f7       	brne	.-8      	; 0xcea <main+0x1a4>
     cf2:	67 cf       	rjmp	.-306    	; 0xbc2 <main+0x7c>

00000cf4 <timerTick>:
		}
	}
}

void timerTick()
{
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
	gtime--;
     cfc:	80 91 f6 00 	lds	r24, 0x00F6
     d00:	90 91 f7 00 	lds	r25, 0x00F7
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	90 93 f7 00 	sts	0x00F7, r25
     d0a:	80 93 f6 00 	sts	0x00F6, r24
}
     d0e:	cf 91       	pop	r28
     d10:	df 91       	pop	r29
     d12:	08 95       	ret

00000d14 <getPassword>:

void getPassword(uint8 *password)
{
     d14:	df 93       	push	r29
     d16:	cf 93       	push	r28
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	a0 97       	sbiw	r28, 0x20	; 32
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	98 a3       	std	Y+32, r25	; 0x20
     d2a:	8f 8f       	std	Y+31, r24	; 0x1f
	uint8 key;
	uint8 i;
	for (i = 0; i < 5; i++)
     d2c:	1d 8e       	std	Y+29, r1	; 0x1d
     d2e:	88 c0       	rjmp	.+272    	; 0xe40 <getPassword+0x12c>
	{
		do
		{
			key = KEYPAD_getPressedKey();
     d30:	0e 94 a4 0c 	call	0x1948	; 0x1948 <KEYPAD_getPressedKey>
     d34:	8e 8f       	std	Y+30, r24	; 0x1e
		} while (key < 0 || key > 9);
     d36:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d38:	8a 30       	cpi	r24, 0x0A	; 10
     d3a:	d0 f7       	brcc	.-12     	; 0xd30 <getPassword+0x1c>
		password[i] = key;
     d3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d3e:	28 2f       	mov	r18, r24
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d44:	98 a1       	ldd	r25, Y+32	; 0x20
     d46:	fc 01       	movw	r30, r24
     d48:	e2 0f       	add	r30, r18
     d4a:	f3 1f       	adc	r31, r19
     d4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d4e:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
     d50:	8a e2       	ldi	r24, 0x2A	; 42
     d52:	0e 94 62 13 	call	0x26c4	; 0x26c4 <LCD_displayCharacter>
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	aa ef       	ldi	r26, 0xFA	; 250
     d5c:	b3 e4       	ldi	r27, 0x43	; 67
     d5e:	89 8f       	std	Y+25, r24	; 0x19
     d60:	9a 8f       	std	Y+26, r25	; 0x1a
     d62:	ab 8f       	std	Y+27, r26	; 0x1b
     d64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d66:	69 8d       	ldd	r22, Y+25	; 0x19
     d68:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	4a ef       	ldi	r20, 0xFA	; 250
     d74:	54 e4       	ldi	r21, 0x44	; 68
     d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	8d 8b       	std	Y+21, r24	; 0x15
     d80:	9e 8b       	std	Y+22, r25	; 0x16
     d82:	af 8b       	std	Y+23, r26	; 0x17
     d84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d86:	6d 89       	ldd	r22, Y+21	; 0x15
     d88:	7e 89       	ldd	r23, Y+22	; 0x16
     d8a:	8f 89       	ldd	r24, Y+23	; 0x17
     d8c:	98 8d       	ldd	r25, Y+24	; 0x18
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	40 e8       	ldi	r20, 0x80	; 128
     d94:	5f e3       	ldi	r21, 0x3F	; 63
     d96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d9a:	88 23       	and	r24, r24
     d9c:	2c f4       	brge	.+10     	; 0xda8 <getPassword+0x94>
		__ticks = 1;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	9c 8b       	std	Y+20, r25	; 0x14
     da4:	8b 8b       	std	Y+19, r24	; 0x13
     da6:	3f c0       	rjmp	.+126    	; 0xe26 <getPassword+0x112>
	else if (__tmp > 65535)
     da8:	6d 89       	ldd	r22, Y+21	; 0x15
     daa:	7e 89       	ldd	r23, Y+22	; 0x16
     dac:	8f 89       	ldd	r24, Y+23	; 0x17
     dae:	98 8d       	ldd	r25, Y+24	; 0x18
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	3f ef       	ldi	r19, 0xFF	; 255
     db4:	4f e7       	ldi	r20, 0x7F	; 127
     db6:	57 e4       	ldi	r21, 0x47	; 71
     db8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dbc:	18 16       	cp	r1, r24
     dbe:	4c f5       	brge	.+82     	; 0xe12 <getPassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc0:	69 8d       	ldd	r22, Y+25	; 0x19
     dc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	40 e2       	ldi	r20, 0x20	; 32
     dce:	51 e4       	ldi	r21, 0x41	; 65
     dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	bc 01       	movw	r22, r24
     dda:	cd 01       	movw	r24, r26
     ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	9c 8b       	std	Y+20, r25	; 0x14
     de6:	8b 8b       	std	Y+19, r24	; 0x13
     de8:	0f c0       	rjmp	.+30     	; 0xe08 <getPassword+0xf4>
     dea:	88 ec       	ldi	r24, 0xC8	; 200
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	9a 8b       	std	Y+18, r25	; 0x12
     df0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     df2:	89 89       	ldd	r24, Y+17	; 0x11
     df4:	9a 89       	ldd	r25, Y+18	; 0x12
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <getPassword+0xe2>
     dfa:	9a 8b       	std	Y+18, r25	; 0x12
     dfc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dfe:	8b 89       	ldd	r24, Y+19	; 0x13
     e00:	9c 89       	ldd	r25, Y+20	; 0x14
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	9c 8b       	std	Y+20, r25	; 0x14
     e06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e08:	8b 89       	ldd	r24, Y+19	; 0x13
     e0a:	9c 89       	ldd	r25, Y+20	; 0x14
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	69 f7       	brne	.-38     	; 0xdea <getPassword+0xd6>
     e10:	14 c0       	rjmp	.+40     	; 0xe3a <getPassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e12:	6d 89       	ldd	r22, Y+21	; 0x15
     e14:	7e 89       	ldd	r23, Y+22	; 0x16
     e16:	8f 89       	ldd	r24, Y+23	; 0x17
     e18:	98 8d       	ldd	r25, Y+24	; 0x18
     e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	9c 8b       	std	Y+20, r25	; 0x14
     e24:	8b 8b       	std	Y+19, r24	; 0x13
     e26:	8b 89       	ldd	r24, Y+19	; 0x13
     e28:	9c 89       	ldd	r25, Y+20	; 0x14
     e2a:	98 8b       	std	Y+16, r25	; 0x10
     e2c:	8f 87       	std	Y+15, r24	; 0x0f
     e2e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e30:	98 89       	ldd	r25, Y+16	; 0x10
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <getPassword+0x11e>
     e36:	98 8b       	std	Y+16, r25	; 0x10
     e38:	8f 87       	std	Y+15, r24	; 0x0f

void getPassword(uint8 *password)
{
	uint8 key;
	uint8 i;
	for (i = 0; i < 5; i++)
     e3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e3c:	8f 5f       	subi	r24, 0xFF	; 255
     e3e:	8d 8f       	std	Y+29, r24	; 0x1d
     e40:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e42:	85 30       	cpi	r24, 0x05	; 5
     e44:	08 f4       	brcc	.+2      	; 0xe48 <getPassword+0x134>
     e46:	74 cf       	rjmp	.-280    	; 0xd30 <getPassword+0x1c>
		} while (key < 0 || key > 9);
		password[i] = key;
		LCD_displayCharacter('*');
		_delay_ms(500);
	}
	while (KEYPAD_getPressedKey() != '=')
     e48:	0e 94 a4 0c 	call	0x1948	; 0x1948 <KEYPAD_getPressedKey>
     e4c:	8d 33       	cpi	r24, 0x3D	; 61
     e4e:	e1 f7       	brne	.-8      	; 0xe48 <getPassword+0x134>
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	a8 e4       	ldi	r26, 0x48	; 72
     e56:	b2 e4       	ldi	r27, 0x42	; 66
     e58:	8b 87       	std	Y+11, r24	; 0x0b
     e5a:	9c 87       	std	Y+12, r25	; 0x0c
     e5c:	ad 87       	std	Y+13, r26	; 0x0d
     e5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e60:	6b 85       	ldd	r22, Y+11	; 0x0b
     e62:	7c 85       	ldd	r23, Y+12	; 0x0c
     e64:	8d 85       	ldd	r24, Y+13	; 0x0d
     e66:	9e 85       	ldd	r25, Y+14	; 0x0e
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	4a ef       	ldi	r20, 0xFA	; 250
     e6e:	54 e4       	ldi	r21, 0x44	; 68
     e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	8f 83       	std	Y+7, r24	; 0x07
     e7a:	98 87       	std	Y+8, r25	; 0x08
     e7c:	a9 87       	std	Y+9, r26	; 0x09
     e7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e80:	6f 81       	ldd	r22, Y+7	; 0x07
     e82:	78 85       	ldd	r23, Y+8	; 0x08
     e84:	89 85       	ldd	r24, Y+9	; 0x09
     e86:	9a 85       	ldd	r25, Y+10	; 0x0a
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e8       	ldi	r20, 0x80	; 128
     e8e:	5f e3       	ldi	r21, 0x3F	; 63
     e90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e94:	88 23       	and	r24, r24
     e96:	2c f4       	brge	.+10     	; 0xea2 <getPassword+0x18e>
		__ticks = 1;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	9e 83       	std	Y+6, r25	; 0x06
     e9e:	8d 83       	std	Y+5, r24	; 0x05
     ea0:	3f c0       	rjmp	.+126    	; 0xf20 <getPassword+0x20c>
	else if (__tmp > 65535)
     ea2:	6f 81       	ldd	r22, Y+7	; 0x07
     ea4:	78 85       	ldd	r23, Y+8	; 0x08
     ea6:	89 85       	ldd	r24, Y+9	; 0x09
     ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	3f ef       	ldi	r19, 0xFF	; 255
     eae:	4f e7       	ldi	r20, 0x7F	; 127
     eb0:	57 e4       	ldi	r21, 0x47	; 71
     eb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eb6:	18 16       	cp	r1, r24
     eb8:	4c f5       	brge	.+82     	; 0xf0c <getPassword+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eba:	6b 85       	ldd	r22, Y+11	; 0x0b
     ebc:	7c 85       	ldd	r23, Y+12	; 0x0c
     ebe:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	40 e2       	ldi	r20, 0x20	; 32
     ec8:	51 e4       	ldi	r21, 0x41	; 65
     eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	bc 01       	movw	r22, r24
     ed4:	cd 01       	movw	r24, r26
     ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	9e 83       	std	Y+6, r25	; 0x06
     ee0:	8d 83       	std	Y+5, r24	; 0x05
     ee2:	0f c0       	rjmp	.+30     	; 0xf02 <getPassword+0x1ee>
     ee4:	88 ec       	ldi	r24, 0xC8	; 200
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	9c 83       	std	Y+4, r25	; 0x04
     eea:	8b 83       	std	Y+3, r24	; 0x03
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	9c 81       	ldd	r25, Y+4	; 0x04
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	f1 f7       	brne	.-4      	; 0xef0 <getPassword+0x1dc>
     ef4:	9c 83       	std	Y+4, r25	; 0x04
     ef6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef8:	8d 81       	ldd	r24, Y+5	; 0x05
     efa:	9e 81       	ldd	r25, Y+6	; 0x06
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	9e 83       	std	Y+6, r25	; 0x06
     f00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f02:	8d 81       	ldd	r24, Y+5	; 0x05
     f04:	9e 81       	ldd	r25, Y+6	; 0x06
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	69 f7       	brne	.-38     	; 0xee4 <getPassword+0x1d0>
     f0a:	14 c0       	rjmp	.+40     	; 0xf34 <getPassword+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f0c:	6f 81       	ldd	r22, Y+7	; 0x07
     f0e:	78 85       	ldd	r23, Y+8	; 0x08
     f10:	89 85       	ldd	r24, Y+9	; 0x09
     f12:	9a 85       	ldd	r25, Y+10	; 0x0a
     f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	9e 83       	std	Y+6, r25	; 0x06
     f1e:	8d 83       	std	Y+5, r24	; 0x05
     f20:	8d 81       	ldd	r24, Y+5	; 0x05
     f22:	9e 81       	ldd	r25, Y+6	; 0x06
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	89 83       	std	Y+1, r24	; 0x01
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	9a 81       	ldd	r25, Y+2	; 0x02
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <getPassword+0x218>
     f30:	9a 83       	std	Y+2, r25	; 0x02
     f32:	89 83       	std	Y+1, r24	; 0x01
		;
	_delay_ms(50);
}
     f34:	a0 96       	adiw	r28, 0x20	; 32
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <setPassword>:

uint8 setPassword()
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	2b 97       	sbiw	r28, 0x0b	; 11
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
	uint8 password[5];
	uint8 confirm_pass[5];
	uint8 i;
	LCD_clearScreen();
     f5a:	0e 94 84 18 	call	0x3108	; 0x3108 <LCD_clearScreen>
	LCD_displayString("plz-enter Pass:");
     f5e:	80 ec       	ldi	r24, 0xC0	; 192
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_displayString>
	LCD_moveCursor(1, 0);
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	0e 94 06 18 	call	0x300c	; 0x300c <LCD_moveCursor>
	getPassword(password);
     f6e:	ce 01       	movw	r24, r28
     f70:	02 96       	adiw	r24, 0x02	; 2
     f72:	0e 94 8a 06 	call	0xd14	; 0xd14 <getPassword>
	LCD_clearScreen();
     f76:	0e 94 84 18 	call	0x3108	; 0x3108 <LCD_clearScreen>
	LCD_displayString("plz-reenter the:");
     f7a:	80 ed       	ldi	r24, 0xD0	; 208
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_displayString>
	LCD_moveCursor(1, 0);
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	0e 94 06 18 	call	0x300c	; 0x300c <LCD_moveCursor>
	LCD_displayString("same pass:");
     f8a:	81 ee       	ldi	r24, 0xE1	; 225
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_displayString>
	LCD_moveCursor(1,10);
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	6a e0       	ldi	r22, 0x0A	; 10
     f96:	0e 94 06 18 	call	0x300c	; 0x300c <LCD_moveCursor>
	getPassword(confirm_pass);
     f9a:	ce 01       	movw	r24, r28
     f9c:	07 96       	adiw	r24, 0x07	; 7
     f9e:	0e 94 8a 06 	call	0xd14	; 0xd14 <getPassword>
	UART_sendByte(setpasswordcmd);
     fa2:	80 e6       	ldi	r24, 0x60	; 96
     fa4:	0e 94 ee 18 	call	0x31dc	; 0x31dc <UART_sendByte>
	UART_recieveByte();
     fa8:	0e 94 05 19 	call	0x320a	; 0x320a <UART_recieveByte>
	for (i = 0; i < 5; i++)
     fac:	19 82       	std	Y+1, r1	; 0x01
     fae:	10 c0       	rjmp	.+32     	; 0xfd0 <setPassword+0x8a>
	{
		UART_sendByte(password[i]);
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	ce 01       	movw	r24, r28
     fb8:	02 96       	adiw	r24, 0x02	; 2
     fba:	fc 01       	movw	r30, r24
     fbc:	e2 0f       	add	r30, r18
     fbe:	f3 1f       	adc	r31, r19
     fc0:	80 81       	ld	r24, Z
     fc2:	0e 94 ee 18 	call	0x31dc	; 0x31dc <UART_sendByte>
		UART_recieveByte();
     fc6:	0e 94 05 19 	call	0x320a	; 0x320a <UART_recieveByte>
	LCD_displayString("same pass:");
	LCD_moveCursor(1,10);
	getPassword(confirm_pass);
	UART_sendByte(setpasswordcmd);
	UART_recieveByte();
	for (i = 0; i < 5; i++)
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	8f 5f       	subi	r24, 0xFF	; 255
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	85 30       	cpi	r24, 0x05	; 5
     fd4:	68 f3       	brcs	.-38     	; 0xfb0 <setPassword+0x6a>
	{
		UART_sendByte(password[i]);
		UART_recieveByte();
	}
	for (i = 0; i < 5; i++)
     fd6:	19 82       	std	Y+1, r1	; 0x01
     fd8:	10 c0       	rjmp	.+32     	; 0xffa <setPassword+0xb4>
	{
		UART_sendByte(confirm_pass[i]);
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	ce 01       	movw	r24, r28
     fe2:	07 96       	adiw	r24, 0x07	; 7
     fe4:	fc 01       	movw	r30, r24
     fe6:	e2 0f       	add	r30, r18
     fe8:	f3 1f       	adc	r31, r19
     fea:	80 81       	ld	r24, Z
     fec:	0e 94 ee 18 	call	0x31dc	; 0x31dc <UART_sendByte>
		UART_recieveByte();
     ff0:	0e 94 05 19 	call	0x320a	; 0x320a <UART_recieveByte>
	for (i = 0; i < 5; i++)
	{
		UART_sendByte(password[i]);
		UART_recieveByte();
	}
	for (i = 0; i < 5; i++)
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	8f 5f       	subi	r24, 0xFF	; 255
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	85 30       	cpi	r24, 0x05	; 5
     ffe:	68 f3       	brcs	.-38     	; 0xfda <setPassword+0x94>
	{
		UART_sendByte(confirm_pass[i]);
		UART_recieveByte();
	}

	return UART_recieveByte();
    1000:	0e 94 05 19 	call	0x320a	; 0x320a <UART_recieveByte>
}
    1004:	2b 96       	adiw	r28, 0x0b	; 11
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <checkPassword>:

uint8 checkPassword()
{
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	2a 97       	sbiw	r28, 0x0a	; 10
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
	uint8 i, j;
	uint8 password[6];
	for (i = 0; i < 3; i++)
    102a:	1b 82       	std	Y+3, r1	; 0x03
    102c:	3b c0       	rjmp	.+118    	; 0x10a4 <checkPassword+0x8e>
	{
		LCD_clearScreen();
    102e:	0e 94 84 18 	call	0x3108	; 0x3108 <LCD_clearScreen>
		LCD_displayString("plz-enter Pass:");
    1032:	80 ec       	ldi	r24, 0xC0	; 192
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_displayString>
		LCD_moveCursor(1, 0);
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	0e 94 06 18 	call	0x300c	; 0x300c <LCD_moveCursor>
		UART_sendByte(cmppasswordcmd);
    1042:	81 e6       	ldi	r24, 0x61	; 97
    1044:	0e 94 ee 18 	call	0x31dc	; 0x31dc <UART_sendByte>
		UART_recieveByte();
    1048:	0e 94 05 19 	call	0x320a	; 0x320a <UART_recieveByte>
		getPassword(password);
    104c:	ce 01       	movw	r24, r28
    104e:	04 96       	adiw	r24, 0x04	; 4
    1050:	0e 94 8a 06 	call	0xd14	; 0xd14 <getPassword>

		for (j = 0; j < 5; j++)
    1054:	1a 82       	std	Y+2, r1	; 0x02
    1056:	10 c0       	rjmp	.+32     	; 0x1078 <checkPassword+0x62>
		{
			UART_sendByte(password[j]);
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	ce 01       	movw	r24, r28
    1060:	04 96       	adiw	r24, 0x04	; 4
    1062:	fc 01       	movw	r30, r24
    1064:	e2 0f       	add	r30, r18
    1066:	f3 1f       	adc	r31, r19
    1068:	80 81       	ld	r24, Z
    106a:	0e 94 ee 18 	call	0x31dc	; 0x31dc <UART_sendByte>
			UART_recieveByte();
    106e:	0e 94 05 19 	call	0x320a	; 0x320a <UART_recieveByte>
		LCD_moveCursor(1, 0);
		UART_sendByte(cmppasswordcmd);
		UART_recieveByte();
		getPassword(password);

		for (j = 0; j < 5; j++)
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	8f 5f       	subi	r24, 0xFF	; 255
    1076:	8a 83       	std	Y+2, r24	; 0x02
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	85 30       	cpi	r24, 0x05	; 5
    107c:	68 f3       	brcs	.-38     	; 0x1058 <checkPassword+0x42>
		{
			UART_sendByte(password[j]);
			UART_recieveByte();
		}
		uint8 status=UART_recieveByte();
    107e:	0e 94 05 19 	call	0x320a	; 0x320a <UART_recieveByte>
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	03 c0       	rjmp	.+6      	; 0x108c <checkPassword+0x76>
		while (status == setready){
			status=UART_recieveByte();
    1086:	0e 94 05 19 	call	0x320a	; 0x320a <UART_recieveByte>
    108a:	89 83       	std	Y+1, r24	; 0x01
		{
			UART_sendByte(password[j]);
			UART_recieveByte();
		}
		uint8 status=UART_recieveByte();
		while (status == setready){
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	88 36       	cpi	r24, 0x68	; 104
    1090:	d1 f3       	breq	.-12     	; 0x1086 <checkPassword+0x70>
			status=UART_recieveByte();
		}
		if(status==matchedpassword)
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	85 36       	cpi	r24, 0x65	; 101
    1096:	19 f4       	brne	.+6      	; 0x109e <checkPassword+0x88>
			return matchedpassword;
    1098:	85 e6       	ldi	r24, 0x65	; 101
    109a:	8a 87       	std	Y+10, r24	; 0x0a
    109c:	08 c0       	rjmp	.+16     	; 0x10ae <checkPassword+0x98>

uint8 checkPassword()
{
	uint8 i, j;
	uint8 password[6];
	for (i = 0; i < 3; i++)
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	8f 5f       	subi	r24, 0xFF	; 255
    10a2:	8b 83       	std	Y+3, r24	; 0x03
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	10 f2       	brcs	.-124    	; 0x102e <checkPassword+0x18>
			status=UART_recieveByte();
		}
		if(status==matchedpassword)
			return matchedpassword;
	}
	return unmatchedpassword;
    10aa:	84 e6       	ldi	r24, 0x64	; 100
    10ac:	8a 87       	std	Y+10, r24	; 0x0a
    10ae:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    10b0:	2a 96       	adiw	r28, 0x0a	; 10
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <__vector_7>:
*                                   Function Defination                                   *
*******************************************************************************************/
 static void(*Timer1_callBackPtr)(void);

ISR(TIMER1_COMPA_vect)
{
    10c2:	1f 92       	push	r1
    10c4:	0f 92       	push	r0
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	0f 92       	push	r0
    10ca:	11 24       	eor	r1, r1
    10cc:	2f 93       	push	r18
    10ce:	3f 93       	push	r19
    10d0:	4f 93       	push	r20
    10d2:	5f 93       	push	r21
    10d4:	6f 93       	push	r22
    10d6:	7f 93       	push	r23
    10d8:	8f 93       	push	r24
    10da:	9f 93       	push	r25
    10dc:	af 93       	push	r26
    10de:	bf 93       	push	r27
    10e0:	ef 93       	push	r30
    10e2:	ff 93       	push	r31
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    (*Timer1_callBackPtr)();
    10ec:	e0 91 f4 00 	lds	r30, 0x00F4
    10f0:	f0 91 f5 00 	lds	r31, 0x00F5
    10f4:	09 95       	icall
}
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	ff 91       	pop	r31
    10fc:	ef 91       	pop	r30
    10fe:	bf 91       	pop	r27
    1100:	af 91       	pop	r26
    1102:	9f 91       	pop	r25
    1104:	8f 91       	pop	r24
    1106:	7f 91       	pop	r23
    1108:	6f 91       	pop	r22
    110a:	5f 91       	pop	r21
    110c:	4f 91       	pop	r20
    110e:	3f 91       	pop	r19
    1110:	2f 91       	pop	r18
    1112:	0f 90       	pop	r0
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	0f 90       	pop	r0
    1118:	1f 90       	pop	r1
    111a:	18 95       	reti

0000111c <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    111c:	1f 92       	push	r1
    111e:	0f 92       	push	r0
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	0f 92       	push	r0
    1124:	11 24       	eor	r1, r1
    1126:	2f 93       	push	r18
    1128:	3f 93       	push	r19
    112a:	4f 93       	push	r20
    112c:	5f 93       	push	r21
    112e:	6f 93       	push	r22
    1130:	7f 93       	push	r23
    1132:	8f 93       	push	r24
    1134:	9f 93       	push	r25
    1136:	af 93       	push	r26
    1138:	bf 93       	push	r27
    113a:	ef 93       	push	r30
    113c:	ff 93       	push	r31
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    (*Timer1_callBackPtr)();
    1146:	e0 91 f4 00 	lds	r30, 0x00F4
    114a:	f0 91 f5 00 	lds	r31, 0x00F5
    114e:	09 95       	icall
}
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	ff 91       	pop	r31
    1156:	ef 91       	pop	r30
    1158:	bf 91       	pop	r27
    115a:	af 91       	pop	r26
    115c:	9f 91       	pop	r25
    115e:	8f 91       	pop	r24
    1160:	7f 91       	pop	r23
    1162:	6f 91       	pop	r22
    1164:	5f 91       	pop	r21
    1166:	4f 91       	pop	r20
    1168:	3f 91       	pop	r19
    116a:	2f 91       	pop	r18
    116c:	0f 90       	pop	r0
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	0f 90       	pop	r0
    1172:	1f 90       	pop	r1
    1174:	18 95       	reti

00001176 <__vector_9>:
/* ISR for overflow interrupt */
ISR(TIMER1_OVF_vect)
{
    1176:	1f 92       	push	r1
    1178:	0f 92       	push	r0
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	0f 92       	push	r0
    117e:	11 24       	eor	r1, r1
    1180:	2f 93       	push	r18
    1182:	3f 93       	push	r19
    1184:	4f 93       	push	r20
    1186:	5f 93       	push	r21
    1188:	6f 93       	push	r22
    118a:	7f 93       	push	r23
    118c:	8f 93       	push	r24
    118e:	9f 93       	push	r25
    1190:	af 93       	push	r26
    1192:	bf 93       	push	r27
    1194:	ef 93       	push	r30
    1196:	ff 93       	push	r31
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    (*Timer1_callBackPtr)();
    11a0:	e0 91 f4 00 	lds	r30, 0x00F4
    11a4:	f0 91 f5 00 	lds	r31, 0x00F5
    11a8:	09 95       	icall
}
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	ff 91       	pop	r31
    11b0:	ef 91       	pop	r30
    11b2:	bf 91       	pop	r27
    11b4:	af 91       	pop	r26
    11b6:	9f 91       	pop	r25
    11b8:	8f 91       	pop	r24
    11ba:	7f 91       	pop	r23
    11bc:	6f 91       	pop	r22
    11be:	5f 91       	pop	r21
    11c0:	4f 91       	pop	r20
    11c2:	3f 91       	pop	r19
    11c4:	2f 91       	pop	r18
    11c6:	0f 90       	pop	r0
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	0f 90       	pop	r0
    11cc:	1f 90       	pop	r1
    11ce:	18 95       	reti

000011d0 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType *Config_Ptr)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <Timer1_init+0x6>
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	89 83       	std	Y+1, r24	; 0x01
    /*Timer1 initialization*/
    TCNT1 = Config_Ptr->initial_value;
    11de:	ac e4       	ldi	r26, 0x4C	; 76
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e9 81       	ldd	r30, Y+1	; 0x01
    11e4:	fa 81       	ldd	r31, Y+2	; 0x02
    11e6:	80 81       	ld	r24, Z
    11e8:	91 81       	ldd	r25, Z+1	; 0x01
    11ea:	11 96       	adiw	r26, 0x01	; 1
    11ec:	9c 93       	st	X, r25
    11ee:	8e 93       	st	-X, r24
    OCR1A = Config_Ptr->compare_value;
    11f0:	aa e4       	ldi	r26, 0x4A	; 74
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e9 81       	ldd	r30, Y+1	; 0x01
    11f6:	fa 81       	ldd	r31, Y+2	; 0x02
    11f8:	82 81       	ldd	r24, Z+2	; 0x02
    11fa:	93 81       	ldd	r25, Z+3	; 0x03
    11fc:	11 96       	adiw	r26, 0x01	; 1
    11fe:	9c 93       	st	X, r25
    1200:	8e 93       	st	-X, r24
    if (Config_Ptr->mode == COMPARE)
    1202:	e9 81       	ldd	r30, Y+1	; 0x01
    1204:	fa 81       	ldd	r31, Y+2	; 0x02
    1206:	85 81       	ldd	r24, Z+5	; 0x05
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	41 f4       	brne	.+16     	; 0x121c <Timer1_init+0x4c>
    {
        TIMSK |= (1 << OCIE1A); // enable compare interrupt
    120c:	a9 e5       	ldi	r26, 0x59	; 89
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e9 e5       	ldi	r30, 0x59	; 89
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	80 61       	ori	r24, 0x10	; 16
    1218:	8c 93       	st	X, r24
    121a:	07 c0       	rjmp	.+14     	; 0x122a <Timer1_init+0x5a>
    }
    else
    {
        TIMSK |= (1 << TOIE1); // enable overflow interrupt}
    121c:	a9 e5       	ldi	r26, 0x59	; 89
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e9 e5       	ldi	r30, 0x59	; 89
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	84 60       	ori	r24, 0x04	; 4
    1228:	8c 93       	st	X, r24
    }
    TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    122a:	ef e4       	ldi	r30, 0x4F	; 79
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	8c e0       	ldi	r24, 0x0C	; 12
    1230:	80 83       	st	Z, r24
    TCCR1B= Config_Ptr->prescaler | (Config_Ptr->mode<<WGM12);
    1232:	ae e4       	ldi	r26, 0x4E	; 78
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e9 81       	ldd	r30, Y+1	; 0x01
    1238:	fa 81       	ldd	r31, Y+2	; 0x02
    123a:	84 81       	ldd	r24, Z+4	; 0x04
    123c:	28 2f       	mov	r18, r24
    123e:	e9 81       	ldd	r30, Y+1	; 0x01
    1240:	fa 81       	ldd	r31, Y+2	; 0x02
    1242:	85 81       	ldd	r24, Z+5	; 0x05
    1244:	88 2f       	mov	r24, r24
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	82 2b       	or	r24, r18
    1256:	8c 93       	st	X, r24
}
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <Timer1_deInit>:

void Timer1_deInit(void)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    /*Timer1 de-initialization*/
    TCNT1 = 0;
    126a:	ec e4       	ldi	r30, 0x4C	; 76
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	11 82       	std	Z+1, r1	; 0x01
    1270:	10 82       	st	Z, r1
    OCR1A = 0;
    1272:	ea e4       	ldi	r30, 0x4A	; 74
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	11 82       	std	Z+1, r1	; 0x01
    1278:	10 82       	st	Z, r1
    TCCR1A = 0;
    127a:	ef e4       	ldi	r30, 0x4F	; 79
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	10 82       	st	Z, r1
    TCCR1B = 0;
    1280:	ee e4       	ldi	r30, 0x4E	; 78
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	10 82       	st	Z, r1
    TIMSK &= ~(1 << OCIE1A);
    1286:	a9 e5       	ldi	r26, 0x59	; 89
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e9 e5       	ldi	r30, 0x59	; 89
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	8f 7e       	andi	r24, 0xEF	; 239
    1292:	8c 93       	st	X, r24
    TIMSK &= ~(1 << TOIE1);
    1294:	a9 e5       	ldi	r26, 0x59	; 89
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e9 e5       	ldi	r30, 0x59	; 89
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	8b 7f       	andi	r24, 0xFB	; 251
    12a0:	8c 93       	st	X, r24
}
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <Timer1_setCallBack>:

void Timer1_setCallBack(void (*a_ptr)(void))
{
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <Timer1_setCallBack+0x6>
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	9a 83       	std	Y+2, r25	; 0x02
    12b4:	89 83       	std	Y+1, r24	; 0x01
    /*Timer1 set callback*/
    Timer1_callBackPtr = a_ptr;
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ba:	90 93 f5 00 	sts	0x00F5, r25
    12be:	80 93 f4 00 	sts	0x00F4, r24
}
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <GPIO_setupPinDirection+0x6>
    12d2:	00 d0       	rcall	.+0      	; 0x12d4 <GPIO_setupPinDirection+0x8>
    12d4:	0f 92       	push	r0
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	6a 83       	std	Y+2, r22	; 0x02
    12de:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	88 30       	cpi	r24, 0x08	; 8
    12e4:	08 f0       	brcs	.+2      	; 0x12e8 <GPIO_setupPinDirection+0x1c>
    12e6:	d5 c0       	rjmp	.+426    	; 0x1492 <GPIO_setupPinDirection+0x1c6>
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	84 30       	cpi	r24, 0x04	; 4
    12ec:	08 f0       	brcs	.+2      	; 0x12f0 <GPIO_setupPinDirection+0x24>
    12ee:	d1 c0       	rjmp	.+418    	; 0x1492 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	3d 83       	std	Y+5, r19	; 0x05
    12f8:	2c 83       	std	Y+4, r18	; 0x04
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	9d 81       	ldd	r25, Y+5	; 0x05
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	91 05       	cpc	r25, r1
    1302:	09 f4       	brne	.+2      	; 0x1306 <GPIO_setupPinDirection+0x3a>
    1304:	43 c0       	rjmp	.+134    	; 0x138c <GPIO_setupPinDirection+0xc0>
    1306:	2c 81       	ldd	r18, Y+4	; 0x04
    1308:	3d 81       	ldd	r19, Y+5	; 0x05
    130a:	22 30       	cpi	r18, 0x02	; 2
    130c:	31 05       	cpc	r19, r1
    130e:	2c f4       	brge	.+10     	; 0x131a <GPIO_setupPinDirection+0x4e>
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	71 f0       	breq	.+28     	; 0x1334 <GPIO_setupPinDirection+0x68>
    1318:	bc c0       	rjmp	.+376    	; 0x1492 <GPIO_setupPinDirection+0x1c6>
    131a:	2c 81       	ldd	r18, Y+4	; 0x04
    131c:	3d 81       	ldd	r19, Y+5	; 0x05
    131e:	22 30       	cpi	r18, 0x02	; 2
    1320:	31 05       	cpc	r19, r1
    1322:	09 f4       	brne	.+2      	; 0x1326 <GPIO_setupPinDirection+0x5a>
    1324:	5f c0       	rjmp	.+190    	; 0x13e4 <GPIO_setupPinDirection+0x118>
    1326:	8c 81       	ldd	r24, Y+4	; 0x04
    1328:	9d 81       	ldd	r25, Y+5	; 0x05
    132a:	83 30       	cpi	r24, 0x03	; 3
    132c:	91 05       	cpc	r25, r1
    132e:	09 f4       	brne	.+2      	; 0x1332 <GPIO_setupPinDirection+0x66>
    1330:	85 c0       	rjmp	.+266    	; 0x143c <GPIO_setupPinDirection+0x170>
    1332:	af c0       	rjmp	.+350    	; 0x1492 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	a1 f4       	brne	.+40     	; 0x1362 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    133a:	aa e3       	ldi	r26, 0x3A	; 58
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	ea e3       	ldi	r30, 0x3A	; 58
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <GPIO_setupPinDirection+0x8c>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <GPIO_setupPinDirection+0x88>
    135c:	84 2b       	or	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	98 c0       	rjmp	.+304    	; 0x1492 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1362:	aa e3       	ldi	r26, 0x3A	; 58
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	ea e3       	ldi	r30, 0x3A	; 58
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <GPIO_setupPinDirection+0xb4>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <GPIO_setupPinDirection+0xb0>
    1384:	80 95       	com	r24
    1386:	84 23       	and	r24, r20
    1388:	8c 93       	st	X, r24
    138a:	83 c0       	rjmp	.+262    	; 0x1492 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	a1 f4       	brne	.+40     	; 0x13ba <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1392:	a7 e3       	ldi	r26, 0x37	; 55
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e7 e3       	ldi	r30, 0x37	; 55
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <GPIO_setupPinDirection+0xe4>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <GPIO_setupPinDirection+0xe0>
    13b4:	84 2b       	or	r24, r20
    13b6:	8c 93       	st	X, r24
    13b8:	6c c0       	rjmp	.+216    	; 0x1492 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    13ba:	a7 e3       	ldi	r26, 0x37	; 55
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e7 e3       	ldi	r30, 0x37	; 55
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <GPIO_setupPinDirection+0x10c>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <GPIO_setupPinDirection+0x108>
    13dc:	80 95       	com	r24
    13de:	84 23       	and	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	57 c0       	rjmp	.+174    	; 0x1492 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	81 30       	cpi	r24, 0x01	; 1
    13e8:	a1 f4       	brne	.+40     	; 0x1412 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    13ea:	a4 e3       	ldi	r26, 0x34	; 52
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e4 e3       	ldi	r30, 0x34	; 52
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <GPIO_setupPinDirection+0x13c>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <GPIO_setupPinDirection+0x138>
    140c:	84 2b       	or	r24, r20
    140e:	8c 93       	st	X, r24
    1410:	40 c0       	rjmp	.+128    	; 0x1492 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1412:	a4 e3       	ldi	r26, 0x34	; 52
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e4 e3       	ldi	r30, 0x34	; 52
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	48 2f       	mov	r20, r24
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 2e       	mov	r0, r18
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <GPIO_setupPinDirection+0x164>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	0a 94       	dec	r0
    1432:	e2 f7       	brpl	.-8      	; 0x142c <GPIO_setupPinDirection+0x160>
    1434:	80 95       	com	r24
    1436:	84 23       	and	r24, r20
    1438:	8c 93       	st	X, r24
    143a:	2b c0       	rjmp	.+86     	; 0x1492 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	a1 f4       	brne	.+40     	; 0x146a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1442:	a1 e3       	ldi	r26, 0x31	; 49
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e1 e3       	ldi	r30, 0x31	; 49
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <GPIO_setupPinDirection+0x194>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <GPIO_setupPinDirection+0x190>
    1464:	84 2b       	or	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	14 c0       	rjmp	.+40     	; 0x1492 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    146a:	a1 e3       	ldi	r26, 0x31	; 49
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e1 e3       	ldi	r30, 0x31	; 49
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	48 2f       	mov	r20, r24
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 2e       	mov	r0, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <GPIO_setupPinDirection+0x1bc>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <GPIO_setupPinDirection+0x1b8>
    148c:	80 95       	com	r24
    148e:	84 23       	and	r24, r20
    1490:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <GPIO_writePin+0x6>
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <GPIO_writePin+0x8>
    14aa:	0f 92       	push	r0
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	6a 83       	std	Y+2, r22	; 0x02
    14b4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	88 30       	cpi	r24, 0x08	; 8
    14ba:	08 f0       	brcs	.+2      	; 0x14be <GPIO_writePin+0x1c>
    14bc:	d5 c0       	rjmp	.+426    	; 0x1668 <GPIO_writePin+0x1c6>
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	84 30       	cpi	r24, 0x04	; 4
    14c2:	08 f0       	brcs	.+2      	; 0x14c6 <GPIO_writePin+0x24>
    14c4:	d1 c0       	rjmp	.+418    	; 0x1668 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	3d 83       	std	Y+5, r19	; 0x05
    14ce:	2c 83       	std	Y+4, r18	; 0x04
    14d0:	8c 81       	ldd	r24, Y+4	; 0x04
    14d2:	9d 81       	ldd	r25, Y+5	; 0x05
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	91 05       	cpc	r25, r1
    14d8:	09 f4       	brne	.+2      	; 0x14dc <GPIO_writePin+0x3a>
    14da:	43 c0       	rjmp	.+134    	; 0x1562 <GPIO_writePin+0xc0>
    14dc:	2c 81       	ldd	r18, Y+4	; 0x04
    14de:	3d 81       	ldd	r19, Y+5	; 0x05
    14e0:	22 30       	cpi	r18, 0x02	; 2
    14e2:	31 05       	cpc	r19, r1
    14e4:	2c f4       	brge	.+10     	; 0x14f0 <GPIO_writePin+0x4e>
    14e6:	8c 81       	ldd	r24, Y+4	; 0x04
    14e8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	71 f0       	breq	.+28     	; 0x150a <GPIO_writePin+0x68>
    14ee:	bc c0       	rjmp	.+376    	; 0x1668 <GPIO_writePin+0x1c6>
    14f0:	2c 81       	ldd	r18, Y+4	; 0x04
    14f2:	3d 81       	ldd	r19, Y+5	; 0x05
    14f4:	22 30       	cpi	r18, 0x02	; 2
    14f6:	31 05       	cpc	r19, r1
    14f8:	09 f4       	brne	.+2      	; 0x14fc <GPIO_writePin+0x5a>
    14fa:	5f c0       	rjmp	.+190    	; 0x15ba <GPIO_writePin+0x118>
    14fc:	8c 81       	ldd	r24, Y+4	; 0x04
    14fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1500:	83 30       	cpi	r24, 0x03	; 3
    1502:	91 05       	cpc	r25, r1
    1504:	09 f4       	brne	.+2      	; 0x1508 <GPIO_writePin+0x66>
    1506:	85 c0       	rjmp	.+266    	; 0x1612 <GPIO_writePin+0x170>
    1508:	af c0       	rjmp	.+350    	; 0x1668 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	a1 f4       	brne	.+40     	; 0x1538 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1510:	ab e3       	ldi	r26, 0x3B	; 59
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	eb e3       	ldi	r30, 0x3B	; 59
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	48 2f       	mov	r20, r24
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	02 2e       	mov	r0, r18
    1528:	02 c0       	rjmp	.+4      	; 0x152e <GPIO_writePin+0x8c>
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	0a 94       	dec	r0
    1530:	e2 f7       	brpl	.-8      	; 0x152a <GPIO_writePin+0x88>
    1532:	84 2b       	or	r24, r20
    1534:	8c 93       	st	X, r24
    1536:	98 c0       	rjmp	.+304    	; 0x1668 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1538:	ab e3       	ldi	r26, 0x3B	; 59
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	eb e3       	ldi	r30, 0x3B	; 59
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	48 2f       	mov	r20, r24
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	02 2e       	mov	r0, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <GPIO_writePin+0xb4>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <GPIO_writePin+0xb0>
    155a:	80 95       	com	r24
    155c:	84 23       	and	r24, r20
    155e:	8c 93       	st	X, r24
    1560:	83 c0       	rjmp	.+262    	; 0x1668 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	a1 f4       	brne	.+40     	; 0x1590 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1568:	a8 e3       	ldi	r26, 0x38	; 56
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e8 e3       	ldi	r30, 0x38	; 56
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	48 2f       	mov	r20, r24
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 2e       	mov	r0, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <GPIO_writePin+0xe4>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	0a 94       	dec	r0
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <GPIO_writePin+0xe0>
    158a:	84 2b       	or	r24, r20
    158c:	8c 93       	st	X, r24
    158e:	6c c0       	rjmp	.+216    	; 0x1668 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1590:	a8 e3       	ldi	r26, 0x38	; 56
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e8 e3       	ldi	r30, 0x38	; 56
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	48 2f       	mov	r20, r24
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	02 2e       	mov	r0, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <GPIO_writePin+0x10c>
    15aa:	88 0f       	add	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	0a 94       	dec	r0
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <GPIO_writePin+0x108>
    15b2:	80 95       	com	r24
    15b4:	84 23       	and	r24, r20
    15b6:	8c 93       	st	X, r24
    15b8:	57 c0       	rjmp	.+174    	; 0x1668 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	a1 f4       	brne	.+40     	; 0x15e8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    15c0:	a5 e3       	ldi	r26, 0x35	; 53
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e5 e3       	ldi	r30, 0x35	; 53
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	48 2f       	mov	r20, r24
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	02 2e       	mov	r0, r18
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <GPIO_writePin+0x13c>
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	0a 94       	dec	r0
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <GPIO_writePin+0x138>
    15e2:	84 2b       	or	r24, r20
    15e4:	8c 93       	st	X, r24
    15e6:	40 c0       	rjmp	.+128    	; 0x1668 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    15e8:	a5 e3       	ldi	r26, 0x35	; 53
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e5 e3       	ldi	r30, 0x35	; 53
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	48 2f       	mov	r20, r24
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	02 2e       	mov	r0, r18
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <GPIO_writePin+0x164>
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	0a 94       	dec	r0
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <GPIO_writePin+0x160>
    160a:	80 95       	com	r24
    160c:	84 23       	and	r24, r20
    160e:	8c 93       	st	X, r24
    1610:	2b c0       	rjmp	.+86     	; 0x1668 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	a1 f4       	brne	.+40     	; 0x1640 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1618:	a2 e3       	ldi	r26, 0x32	; 50
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e2 e3       	ldi	r30, 0x32	; 50
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <GPIO_writePin+0x194>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <GPIO_writePin+0x190>
    163a:	84 2b       	or	r24, r20
    163c:	8c 93       	st	X, r24
    163e:	14 c0       	rjmp	.+40     	; 0x1668 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1640:	a2 e3       	ldi	r26, 0x32	; 50
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e2 e3       	ldi	r30, 0x32	; 50
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	48 2f       	mov	r20, r24
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	02 2e       	mov	r0, r18
    1658:	02 c0       	rjmp	.+4      	; 0x165e <GPIO_writePin+0x1bc>
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	0a 94       	dec	r0
    1660:	e2 f7       	brpl	.-8      	; 0x165a <GPIO_writePin+0x1b8>
    1662:	80 95       	com	r24
    1664:	84 23       	and	r24, r20
    1666:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	00 d0       	rcall	.+0      	; 0x167e <GPIO_readPin+0x6>
    167e:	00 d0       	rcall	.+0      	; 0x1680 <GPIO_readPin+0x8>
    1680:	0f 92       	push	r0
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	8a 83       	std	Y+2, r24	; 0x02
    1688:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    168a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	88 30       	cpi	r24, 0x08	; 8
    1690:	08 f0       	brcs	.+2      	; 0x1694 <GPIO_readPin+0x1c>
    1692:	84 c0       	rjmp	.+264    	; 0x179c <GPIO_readPin+0x124>
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	84 30       	cpi	r24, 0x04	; 4
    1698:	08 f0       	brcs	.+2      	; 0x169c <GPIO_readPin+0x24>
    169a:	80 c0       	rjmp	.+256    	; 0x179c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	3d 83       	std	Y+5, r19	; 0x05
    16a4:	2c 83       	std	Y+4, r18	; 0x04
    16a6:	4c 81       	ldd	r20, Y+4	; 0x04
    16a8:	5d 81       	ldd	r21, Y+5	; 0x05
    16aa:	41 30       	cpi	r20, 0x01	; 1
    16ac:	51 05       	cpc	r21, r1
    16ae:	79 f1       	breq	.+94     	; 0x170e <GPIO_readPin+0x96>
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	9d 81       	ldd	r25, Y+5	; 0x05
    16b4:	82 30       	cpi	r24, 0x02	; 2
    16b6:	91 05       	cpc	r25, r1
    16b8:	34 f4       	brge	.+12     	; 0x16c6 <GPIO_readPin+0x4e>
    16ba:	2c 81       	ldd	r18, Y+4	; 0x04
    16bc:	3d 81       	ldd	r19, Y+5	; 0x05
    16be:	21 15       	cp	r18, r1
    16c0:	31 05       	cpc	r19, r1
    16c2:	69 f0       	breq	.+26     	; 0x16de <GPIO_readPin+0x66>
    16c4:	6b c0       	rjmp	.+214    	; 0x179c <GPIO_readPin+0x124>
    16c6:	4c 81       	ldd	r20, Y+4	; 0x04
    16c8:	5d 81       	ldd	r21, Y+5	; 0x05
    16ca:	42 30       	cpi	r20, 0x02	; 2
    16cc:	51 05       	cpc	r21, r1
    16ce:	b9 f1       	breq	.+110    	; 0x173e <GPIO_readPin+0xc6>
    16d0:	8c 81       	ldd	r24, Y+4	; 0x04
    16d2:	9d 81       	ldd	r25, Y+5	; 0x05
    16d4:	83 30       	cpi	r24, 0x03	; 3
    16d6:	91 05       	cpc	r25, r1
    16d8:	09 f4       	brne	.+2      	; 0x16dc <GPIO_readPin+0x64>
    16da:	49 c0       	rjmp	.+146    	; 0x176e <GPIO_readPin+0xf6>
    16dc:	5f c0       	rjmp	.+190    	; 0x179c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    16de:	e9 e3       	ldi	r30, 0x39	; 57
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	88 2f       	mov	r24, r24
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	a9 01       	movw	r20, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <GPIO_readPin+0x7e>
    16f2:	55 95       	asr	r21
    16f4:	47 95       	ror	r20
    16f6:	8a 95       	dec	r24
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <GPIO_readPin+0x7a>
    16fa:	ca 01       	movw	r24, r20
    16fc:	81 70       	andi	r24, 0x01	; 1
    16fe:	90 70       	andi	r25, 0x00	; 0
    1700:	88 23       	and	r24, r24
    1702:	19 f0       	breq	.+6      	; 0x170a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	89 83       	std	Y+1, r24	; 0x01
    1708:	49 c0       	rjmp	.+146    	; 0x179c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    170a:	19 82       	std	Y+1, r1	; 0x01
    170c:	47 c0       	rjmp	.+142    	; 0x179c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    170e:	e6 e3       	ldi	r30, 0x36	; 54
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	88 2f       	mov	r24, r24
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	a9 01       	movw	r20, r18
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <GPIO_readPin+0xae>
    1722:	55 95       	asr	r21
    1724:	47 95       	ror	r20
    1726:	8a 95       	dec	r24
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <GPIO_readPin+0xaa>
    172a:	ca 01       	movw	r24, r20
    172c:	81 70       	andi	r24, 0x01	; 1
    172e:	90 70       	andi	r25, 0x00	; 0
    1730:	88 23       	and	r24, r24
    1732:	19 f0       	breq	.+6      	; 0x173a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	31 c0       	rjmp	.+98     	; 0x179c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    173a:	19 82       	std	Y+1, r1	; 0x01
    173c:	2f c0       	rjmp	.+94     	; 0x179c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    173e:	e3 e3       	ldi	r30, 0x33	; 51
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	88 2f       	mov	r24, r24
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	a9 01       	movw	r20, r18
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <GPIO_readPin+0xde>
    1752:	55 95       	asr	r21
    1754:	47 95       	ror	r20
    1756:	8a 95       	dec	r24
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <GPIO_readPin+0xda>
    175a:	ca 01       	movw	r24, r20
    175c:	81 70       	andi	r24, 0x01	; 1
    175e:	90 70       	andi	r25, 0x00	; 0
    1760:	88 23       	and	r24, r24
    1762:	19 f0       	breq	.+6      	; 0x176a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	19 c0       	rjmp	.+50     	; 0x179c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    176a:	19 82       	std	Y+1, r1	; 0x01
    176c:	17 c0       	rjmp	.+46     	; 0x179c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    176e:	e0 e3       	ldi	r30, 0x30	; 48
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	88 2f       	mov	r24, r24
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	a9 01       	movw	r20, r18
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <GPIO_readPin+0x10e>
    1782:	55 95       	asr	r21
    1784:	47 95       	ror	r20
    1786:	8a 95       	dec	r24
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <GPIO_readPin+0x10a>
    178a:	ca 01       	movw	r24, r20
    178c:	81 70       	andi	r24, 0x01	; 1
    178e:	90 70       	andi	r25, 0x00	; 0
    1790:	88 23       	and	r24, r24
    1792:	19 f0       	breq	.+6      	; 0x179a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	01 c0       	rjmp	.+2      	; 0x179c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    179a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    179c:	89 81       	ldd	r24, Y+1	; 0x01
}
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <GPIO_setupPortDirection+0x6>
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <GPIO_setupPortDirection+0x8>
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	89 83       	std	Y+1, r24	; 0x01
    17bc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	84 30       	cpi	r24, 0x04	; 4
    17c2:	90 f5       	brcc	.+100    	; 0x1828 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	3c 83       	std	Y+4, r19	; 0x04
    17cc:	2b 83       	std	Y+3, r18	; 0x03
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	91 05       	cpc	r25, r1
    17d6:	d1 f0       	breq	.+52     	; 0x180c <GPIO_setupPortDirection+0x5e>
    17d8:	2b 81       	ldd	r18, Y+3	; 0x03
    17da:	3c 81       	ldd	r19, Y+4	; 0x04
    17dc:	22 30       	cpi	r18, 0x02	; 2
    17de:	31 05       	cpc	r19, r1
    17e0:	2c f4       	brge	.+10     	; 0x17ec <GPIO_setupPortDirection+0x3e>
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	9c 81       	ldd	r25, Y+4	; 0x04
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	61 f0       	breq	.+24     	; 0x1802 <GPIO_setupPortDirection+0x54>
    17ea:	1e c0       	rjmp	.+60     	; 0x1828 <GPIO_setupPortDirection+0x7a>
    17ec:	2b 81       	ldd	r18, Y+3	; 0x03
    17ee:	3c 81       	ldd	r19, Y+4	; 0x04
    17f0:	22 30       	cpi	r18, 0x02	; 2
    17f2:	31 05       	cpc	r19, r1
    17f4:	81 f0       	breq	.+32     	; 0x1816 <GPIO_setupPortDirection+0x68>
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	9c 81       	ldd	r25, Y+4	; 0x04
    17fa:	83 30       	cpi	r24, 0x03	; 3
    17fc:	91 05       	cpc	r25, r1
    17fe:	81 f0       	breq	.+32     	; 0x1820 <GPIO_setupPortDirection+0x72>
    1800:	13 c0       	rjmp	.+38     	; 0x1828 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1802:	ea e3       	ldi	r30, 0x3A	; 58
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	80 83       	st	Z, r24
    180a:	0e c0       	rjmp	.+28     	; 0x1828 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    180c:	e7 e3       	ldi	r30, 0x37	; 55
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	80 83       	st	Z, r24
    1814:	09 c0       	rjmp	.+18     	; 0x1828 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1816:	e4 e3       	ldi	r30, 0x34	; 52
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	80 83       	st	Z, r24
    181e:	04 c0       	rjmp	.+8      	; 0x1828 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1820:	e1 e3       	ldi	r30, 0x31	; 49
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	80 83       	st	Z, r24
			break;
		}
	}
}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <GPIO_writePort+0x6>
    183c:	00 d0       	rcall	.+0      	; 0x183e <GPIO_writePort+0x8>
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	84 30       	cpi	r24, 0x04	; 4
    184a:	90 f5       	brcc	.+100    	; 0x18b0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	3c 83       	std	Y+4, r19	; 0x04
    1854:	2b 83       	std	Y+3, r18	; 0x03
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	9c 81       	ldd	r25, Y+4	; 0x04
    185a:	81 30       	cpi	r24, 0x01	; 1
    185c:	91 05       	cpc	r25, r1
    185e:	d1 f0       	breq	.+52     	; 0x1894 <GPIO_writePort+0x5e>
    1860:	2b 81       	ldd	r18, Y+3	; 0x03
    1862:	3c 81       	ldd	r19, Y+4	; 0x04
    1864:	22 30       	cpi	r18, 0x02	; 2
    1866:	31 05       	cpc	r19, r1
    1868:	2c f4       	brge	.+10     	; 0x1874 <GPIO_writePort+0x3e>
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	9c 81       	ldd	r25, Y+4	; 0x04
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	61 f0       	breq	.+24     	; 0x188a <GPIO_writePort+0x54>
    1872:	1e c0       	rjmp	.+60     	; 0x18b0 <GPIO_writePort+0x7a>
    1874:	2b 81       	ldd	r18, Y+3	; 0x03
    1876:	3c 81       	ldd	r19, Y+4	; 0x04
    1878:	22 30       	cpi	r18, 0x02	; 2
    187a:	31 05       	cpc	r19, r1
    187c:	81 f0       	breq	.+32     	; 0x189e <GPIO_writePort+0x68>
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	9c 81       	ldd	r25, Y+4	; 0x04
    1882:	83 30       	cpi	r24, 0x03	; 3
    1884:	91 05       	cpc	r25, r1
    1886:	81 f0       	breq	.+32     	; 0x18a8 <GPIO_writePort+0x72>
    1888:	13 c0       	rjmp	.+38     	; 0x18b0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    188a:	eb e3       	ldi	r30, 0x3B	; 59
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	80 83       	st	Z, r24
    1892:	0e c0       	rjmp	.+28     	; 0x18b0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1894:	e8 e3       	ldi	r30, 0x38	; 56
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	80 83       	st	Z, r24
    189c:	09 c0       	rjmp	.+18     	; 0x18b0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    189e:	e5 e3       	ldi	r30, 0x35	; 53
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	80 83       	st	Z, r24
    18a6:	04 c0       	rjmp	.+8      	; 0x18b0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    18a8:	e2 e3       	ldi	r30, 0x32	; 50
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	80 83       	st	Z, r24
			break;
		}
	}
}
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <GPIO_readPort+0x6>
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <GPIO_readPort+0x8>
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    18cc:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	84 30       	cpi	r24, 0x04	; 4
    18d2:	90 f5       	brcc	.+100    	; 0x1938 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	3c 83       	std	Y+4, r19	; 0x04
    18dc:	2b 83       	std	Y+3, r18	; 0x03
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	9c 81       	ldd	r25, Y+4	; 0x04
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	91 05       	cpc	r25, r1
    18e6:	d1 f0       	breq	.+52     	; 0x191c <GPIO_readPort+0x5e>
    18e8:	2b 81       	ldd	r18, Y+3	; 0x03
    18ea:	3c 81       	ldd	r19, Y+4	; 0x04
    18ec:	22 30       	cpi	r18, 0x02	; 2
    18ee:	31 05       	cpc	r19, r1
    18f0:	2c f4       	brge	.+10     	; 0x18fc <GPIO_readPort+0x3e>
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	9c 81       	ldd	r25, Y+4	; 0x04
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	61 f0       	breq	.+24     	; 0x1912 <GPIO_readPort+0x54>
    18fa:	1e c0       	rjmp	.+60     	; 0x1938 <GPIO_readPort+0x7a>
    18fc:	2b 81       	ldd	r18, Y+3	; 0x03
    18fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1900:	22 30       	cpi	r18, 0x02	; 2
    1902:	31 05       	cpc	r19, r1
    1904:	81 f0       	breq	.+32     	; 0x1926 <GPIO_readPort+0x68>
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	9c 81       	ldd	r25, Y+4	; 0x04
    190a:	83 30       	cpi	r24, 0x03	; 3
    190c:	91 05       	cpc	r25, r1
    190e:	81 f0       	breq	.+32     	; 0x1930 <GPIO_readPort+0x72>
    1910:	13 c0       	rjmp	.+38     	; 0x1938 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1912:	e9 e3       	ldi	r30, 0x39	; 57
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	89 83       	std	Y+1, r24	; 0x01
    191a:	0e c0       	rjmp	.+28     	; 0x1938 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    191c:	e6 e3       	ldi	r30, 0x36	; 54
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	09 c0       	rjmp	.+18     	; 0x1938 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1926:	e3 e3       	ldi	r30, 0x33	; 51
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	04 c0       	rjmp	.+8      	; 0x1938 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1930:	e0 e3       	ldi	r30, 0x30	; 48
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1938:	89 81       	ldd	r24, Y+1	; 0x01
}
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	60 97       	sbiw	r28, 0x10	; 16
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	64 e0       	ldi	r22, 0x04	; 4
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	65 e0       	ldi	r22, 0x05	; 5
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	66 e0       	ldi	r22, 0x06	; 6
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	67 e0       	ldi	r22, 0x07	; 7
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	60 e0       	ldi	r22, 0x00	; 0
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	61 e0       	ldi	r22, 0x01	; 1
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	62 e0       	ldi	r22, 0x02	; 2
    199c:	40 e0       	ldi	r20, 0x00	; 0
    199e:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	63 e0       	ldi	r22, 0x03	; 3
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    19ac:	1f 86       	std	Y+15, r1	; 0x0f
    19ae:	b1 c0       	rjmp	.+354    	; 0x1b12 <KEYPAD_getPressedKey+0x1ca>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    19b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b2:	98 2f       	mov	r25, r24
    19b4:	9c 5f       	subi	r25, 0xFC	; 252
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	69 2f       	mov	r22, r25
    19ba:	41 e0       	ldi	r20, 0x01	; 1
    19bc:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    19c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c2:	98 2f       	mov	r25, r24
    19c4:	9c 5f       	subi	r25, 0xFC	; 252
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	69 2f       	mov	r22, r25
    19ca:	40 e0       	ldi	r20, 0x00	; 0
    19cc:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    19d0:	18 8a       	std	Y+16, r1	; 0x10
    19d2:	1f c0       	rjmp	.+62     	; 0x1a12 <KEYPAD_getPressedKey+0xca>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	68 89       	ldd	r22, Y+16	; 0x10
    19d8:	0e 94 3c 0b 	call	0x1678	; 0x1678 <GPIO_readPin>
    19dc:	88 23       	and	r24, r24
    19de:	b1 f4       	brne	.+44     	; 0x1a0c <KEYPAD_getPressedKey+0xc4>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    19e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e2:	88 2f       	mov	r24, r24
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	98 2f       	mov	r25, r24
    19f0:	88 89       	ldd	r24, Y+16	; 0x10
    19f2:	89 0f       	add	r24, r25
    19f4:	8f 5f       	subi	r24, 0xFF	; 255
    19f6:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    19fa:	60 96       	adiw	r28, 0x10	; 16
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1a0c:	88 89       	ldd	r24, Y+16	; 0x10
    1a0e:	8f 5f       	subi	r24, 0xFF	; 255
    1a10:	88 8b       	std	Y+16, r24	; 0x10
    1a12:	88 89       	ldd	r24, Y+16	; 0x10
    1a14:	84 30       	cpi	r24, 0x04	; 4
    1a16:	f0 f2       	brcs	.-68     	; 0x19d4 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1a18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a1a:	98 2f       	mov	r25, r24
    1a1c:	9c 5f       	subi	r25, 0xFC	; 252
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	69 2f       	mov	r22, r25
    1a22:	40 e0       	ldi	r20, 0x00	; 0
    1a24:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_setupPinDirection>
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	a0 ea       	ldi	r26, 0xA0	; 160
    1a2e:	b0 e4       	ldi	r27, 0x40	; 64
    1a30:	8b 87       	std	Y+11, r24	; 0x0b
    1a32:	9c 87       	std	Y+12, r25	; 0x0c
    1a34:	ad 87       	std	Y+13, r26	; 0x0d
    1a36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	4a ef       	ldi	r20, 0xFA	; 250
    1a46:	54 e4       	ldi	r21, 0x44	; 68
    1a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	8f 83       	std	Y+7, r24	; 0x07
    1a52:	98 87       	std	Y+8, r25	; 0x08
    1a54:	a9 87       	std	Y+9, r26	; 0x09
    1a56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a58:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5a:	78 85       	ldd	r23, Y+8	; 0x08
    1a5c:	89 85       	ldd	r24, Y+9	; 0x09
    1a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e8       	ldi	r20, 0x80	; 128
    1a66:	5f e3       	ldi	r21, 0x3F	; 63
    1a68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a6c:	88 23       	and	r24, r24
    1a6e:	2c f4       	brge	.+10     	; 0x1a7a <KEYPAD_getPressedKey+0x132>
		__ticks = 1;
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	9e 83       	std	Y+6, r25	; 0x06
    1a76:	8d 83       	std	Y+5, r24	; 0x05
    1a78:	3f c0       	rjmp	.+126    	; 0x1af8 <KEYPAD_getPressedKey+0x1b0>
	else if (__tmp > 65535)
    1a7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7c:	78 85       	ldd	r23, Y+8	; 0x08
    1a7e:	89 85       	ldd	r24, Y+9	; 0x09
    1a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	3f ef       	ldi	r19, 0xFF	; 255
    1a86:	4f e7       	ldi	r20, 0x7F	; 127
    1a88:	57 e4       	ldi	r21, 0x47	; 71
    1a8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a8e:	18 16       	cp	r1, r24
    1a90:	4c f5       	brge	.+82     	; 0x1ae4 <KEYPAD_getPressedKey+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e2       	ldi	r20, 0x20	; 32
    1aa0:	51 e4       	ldi	r21, 0x41	; 65
    1aa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	bc 01       	movw	r22, r24
    1aac:	cd 01       	movw	r24, r26
    1aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	9e 83       	std	Y+6, r25	; 0x06
    1ab8:	8d 83       	std	Y+5, r24	; 0x05
    1aba:	0f c0       	rjmp	.+30     	; 0x1ada <KEYPAD_getPressedKey+0x192>
    1abc:	88 ec       	ldi	r24, 0xC8	; 200
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	9c 83       	std	Y+4, r25	; 0x04
    1ac2:	8b 83       	std	Y+3, r24	; 0x03
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <KEYPAD_getPressedKey+0x180>
    1acc:	9c 83       	std	Y+4, r25	; 0x04
    1ace:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	9e 83       	std	Y+6, r25	; 0x06
    1ad8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ada:	8d 81       	ldd	r24, Y+5	; 0x05
    1adc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	69 f7       	brne	.-38     	; 0x1abc <KEYPAD_getPressedKey+0x174>
    1ae2:	14 c0       	rjmp	.+40     	; 0x1b0c <KEYPAD_getPressedKey+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae6:	78 85       	ldd	r23, Y+8	; 0x08
    1ae8:	89 85       	ldd	r24, Y+9	; 0x09
    1aea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	9e 83       	std	Y+6, r25	; 0x06
    1af6:	8d 83       	std	Y+5, r24	; 0x05
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
    1afa:	9e 81       	ldd	r25, Y+6	; 0x06
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	9a 81       	ldd	r25, Y+2	; 0x02
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	f1 f7       	brne	.-4      	; 0x1b04 <KEYPAD_getPressedKey+0x1bc>
    1b08:	9a 83       	std	Y+2, r25	; 0x02
    1b0a:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1b0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b0e:	8f 5f       	subi	r24, 0xFF	; 255
    1b10:	8f 87       	std	Y+15, r24	; 0x0f
    1b12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b14:	84 30       	cpi	r24, 0x04	; 4
    1b16:	08 f4       	brcc	.+2      	; 0x1b1a <KEYPAD_getPressedKey+0x1d2>
    1b18:	4b cf       	rjmp	.-362    	; 0x19b0 <KEYPAD_getPressedKey+0x68>
    1b1a:	48 cf       	rjmp	.-368    	; 0x19ac <KEYPAD_getPressedKey+0x64>

00001b1c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1b2a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	3c 83       	std	Y+4, r19	; 0x04
    1b34:	2b 83       	std	Y+3, r18	; 0x03
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3a:	88 30       	cpi	r24, 0x08	; 8
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1b40:	70 c0       	rjmp	.+224    	; 0x1c22 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1b42:	2b 81       	ldd	r18, Y+3	; 0x03
    1b44:	3c 81       	ldd	r19, Y+4	; 0x04
    1b46:	29 30       	cpi	r18, 0x09	; 9
    1b48:	31 05       	cpc	r19, r1
    1b4a:	5c f5       	brge	.+86     	; 0x1ba2 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b50:	84 30       	cpi	r24, 0x04	; 4
    1b52:	91 05       	cpc	r25, r1
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1b56:	59 c0       	rjmp	.+178    	; 0x1c0a <KEYPAD_4x4_adjustKeyNumber+0xee>
    1b58:	2b 81       	ldd	r18, Y+3	; 0x03
    1b5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b5c:	25 30       	cpi	r18, 0x05	; 5
    1b5e:	31 05       	cpc	r19, r1
    1b60:	9c f4       	brge	.+38     	; 0x1b88 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	9c 81       	ldd	r25, Y+4	; 0x04
    1b66:	82 30       	cpi	r24, 0x02	; 2
    1b68:	91 05       	cpc	r25, r1
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <KEYPAD_4x4_adjustKeyNumber+0x52>
    1b6c:	48 c0       	rjmp	.+144    	; 0x1bfe <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1b6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b70:	3c 81       	ldd	r19, Y+4	; 0x04
    1b72:	23 30       	cpi	r18, 0x03	; 3
    1b74:	31 05       	cpc	r19, r1
    1b76:	0c f0       	brlt	.+2      	; 0x1b7a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1b78:	45 c0       	rjmp	.+138    	; 0x1c04 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7e:	81 30       	cpi	r24, 0x01	; 1
    1b80:	91 05       	cpc	r25, r1
    1b82:	09 f4       	brne	.+2      	; 0x1b86 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1b84:	39 c0       	rjmp	.+114    	; 0x1bf8 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1b86:	67 c0       	rjmp	.+206    	; 0x1c56 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1b88:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8c:	26 30       	cpi	r18, 0x06	; 6
    1b8e:	31 05       	cpc	r19, r1
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1b92:	41 c0       	rjmp	.+130    	; 0x1c16 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	9c 81       	ldd	r25, Y+4	; 0x04
    1b98:	87 30       	cpi	r24, 0x07	; 7
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	0c f0       	brlt	.+2      	; 0x1ba0 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1b9e:	3e c0       	rjmp	.+124    	; 0x1c1c <KEYPAD_4x4_adjustKeyNumber+0x100>
    1ba0:	37 c0       	rjmp	.+110    	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1ba2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba6:	2c 30       	cpi	r18, 0x0C	; 12
    1ba8:	31 05       	cpc	r19, r1
    1baa:	09 f4       	brne	.+2      	; 0x1bae <KEYPAD_4x4_adjustKeyNumber+0x92>
    1bac:	46 c0       	rjmp	.+140    	; 0x1c3a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb2:	8d 30       	cpi	r24, 0x0D	; 13
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	5c f4       	brge	.+22     	; 0x1bce <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1bb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bba:	3c 81       	ldd	r19, Y+4	; 0x04
    1bbc:	2a 30       	cpi	r18, 0x0A	; 10
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	b1 f1       	breq	.+108    	; 0x1c2e <KEYPAD_4x4_adjustKeyNumber+0x112>
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc6:	8b 30       	cpi	r24, 0x0B	; 11
    1bc8:	91 05       	cpc	r25, r1
    1bca:	a4 f5       	brge	.+104    	; 0x1c34 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1bcc:	2d c0       	rjmp	.+90     	; 0x1c28 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1bce:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd2:	2e 30       	cpi	r18, 0x0E	; 14
    1bd4:	31 05       	cpc	r19, r1
    1bd6:	b9 f1       	breq	.+110    	; 0x1c46 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	9c 81       	ldd	r25, Y+4	; 0x04
    1bdc:	8e 30       	cpi	r24, 0x0E	; 14
    1bde:	91 05       	cpc	r25, r1
    1be0:	7c f1       	brlt	.+94     	; 0x1c40 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1be2:	2b 81       	ldd	r18, Y+3	; 0x03
    1be4:	3c 81       	ldd	r19, Y+4	; 0x04
    1be6:	2f 30       	cpi	r18, 0x0F	; 15
    1be8:	31 05       	cpc	r19, r1
    1bea:	79 f1       	breq	.+94     	; 0x1c4a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf0:	80 31       	cpi	r24, 0x10	; 16
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	69 f1       	breq	.+90     	; 0x1c50 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1bf6:	2f c0       	rjmp	.+94     	; 0x1c56 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1bf8:	87 e0       	ldi	r24, 0x07	; 7
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	2e c0       	rjmp	.+92     	; 0x1c5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1bfe:	88 e0       	ldi	r24, 0x08	; 8
    1c00:	89 83       	std	Y+1, r24	; 0x01
    1c02:	2b c0       	rjmp	.+86     	; 0x1c5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1c04:	89 e0       	ldi	r24, 0x09	; 9
    1c06:	89 83       	std	Y+1, r24	; 0x01
    1c08:	28 c0       	rjmp	.+80     	; 0x1c5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1c0a:	85 e2       	ldi	r24, 0x25	; 37
    1c0c:	89 83       	std	Y+1, r24	; 0x01
    1c0e:	25 c0       	rjmp	.+74     	; 0x1c5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1c10:	84 e0       	ldi	r24, 0x04	; 4
    1c12:	89 83       	std	Y+1, r24	; 0x01
    1c14:	22 c0       	rjmp	.+68     	; 0x1c5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1c16:	85 e0       	ldi	r24, 0x05	; 5
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	1f c0       	rjmp	.+62     	; 0x1c5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1c1c:	86 e0       	ldi	r24, 0x06	; 6
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	1c c0       	rjmp	.+56     	; 0x1c5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1c22:	8a e2       	ldi	r24, 0x2A	; 42
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	19 c0       	rjmp	.+50     	; 0x1c5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	89 83       	std	Y+1, r24	; 0x01
    1c2c:	16 c0       	rjmp	.+44     	; 0x1c5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1c2e:	82 e0       	ldi	r24, 0x02	; 2
    1c30:	89 83       	std	Y+1, r24	; 0x01
    1c32:	13 c0       	rjmp	.+38     	; 0x1c5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1c34:	83 e0       	ldi	r24, 0x03	; 3
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	10 c0       	rjmp	.+32     	; 0x1c5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1c3a:	8d e2       	ldi	r24, 0x2D	; 45
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    1c3e:	0d c0       	rjmp	.+26     	; 0x1c5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1c40:	8d e0       	ldi	r24, 0x0D	; 13
    1c42:	89 83       	std	Y+1, r24	; 0x01
    1c44:	0a c0       	rjmp	.+20     	; 0x1c5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1c46:	19 82       	std	Y+1, r1	; 0x01
    1c48:	08 c0       	rjmp	.+16     	; 0x1c5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1c4a:	8d e3       	ldi	r24, 0x3D	; 61
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    1c4e:	05 c0       	rjmp	.+10     	; 0x1c5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1c50:	8b e2       	ldi	r24, 0x2B	; 43
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	2e 97       	sbiw	r28, 0x0e	; 14
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1c7e:	82 e0       	ldi	r24, 0x02	; 2
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	41 e0       	ldi	r20, 0x01	; 1
    1c84:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1c88:	82 e0       	ldi	r24, 0x02	; 2
    1c8a:	61 e0       	ldi	r22, 0x01	; 1
    1c8c:	41 e0       	ldi	r20, 0x01	; 1
    1c8e:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_setupPinDirection>
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a0 ea       	ldi	r26, 0xA0	; 160
    1c98:	b1 e4       	ldi	r27, 0x41	; 65
    1c9a:	8b 87       	std	Y+11, r24	; 0x0b
    1c9c:	9c 87       	std	Y+12, r25	; 0x0c
    1c9e:	ad 87       	std	Y+13, r26	; 0x0d
    1ca0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	4a ef       	ldi	r20, 0xFA	; 250
    1cb0:	54 e4       	ldi	r21, 0x44	; 68
    1cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	8f 83       	std	Y+7, r24	; 0x07
    1cbc:	98 87       	std	Y+8, r25	; 0x08
    1cbe:	a9 87       	std	Y+9, r26	; 0x09
    1cc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc4:	78 85       	ldd	r23, Y+8	; 0x08
    1cc6:	89 85       	ldd	r24, Y+9	; 0x09
    1cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e8       	ldi	r20, 0x80	; 128
    1cd0:	5f e3       	ldi	r21, 0x3F	; 63
    1cd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd6:	88 23       	and	r24, r24
    1cd8:	2c f4       	brge	.+10     	; 0x1ce4 <LCD_init+0x7a>
		__ticks = 1;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	9e 83       	std	Y+6, r25	; 0x06
    1ce0:	8d 83       	std	Y+5, r24	; 0x05
    1ce2:	3f c0       	rjmp	.+126    	; 0x1d62 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce6:	78 85       	ldd	r23, Y+8	; 0x08
    1ce8:	89 85       	ldd	r24, Y+9	; 0x09
    1cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	3f ef       	ldi	r19, 0xFF	; 255
    1cf0:	4f e7       	ldi	r20, 0x7F	; 127
    1cf2:	57 e4       	ldi	r21, 0x47	; 71
    1cf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf8:	18 16       	cp	r1, r24
    1cfa:	4c f5       	brge	.+82     	; 0x1d4e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e2       	ldi	r20, 0x20	; 32
    1d0a:	51 e4       	ldi	r21, 0x41	; 65
    1d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	bc 01       	movw	r22, r24
    1d16:	cd 01       	movw	r24, r26
    1d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	9e 83       	std	Y+6, r25	; 0x06
    1d22:	8d 83       	std	Y+5, r24	; 0x05
    1d24:	0f c0       	rjmp	.+30     	; 0x1d44 <LCD_init+0xda>
    1d26:	88 ec       	ldi	r24, 0xC8	; 200
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9c 83       	std	Y+4, r25	; 0x04
    1d2c:	8b 83       	std	Y+3, r24	; 0x03
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	9c 81       	ldd	r25, Y+4	; 0x04
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <LCD_init+0xc8>
    1d36:	9c 83       	std	Y+4, r25	; 0x04
    1d38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	9e 83       	std	Y+6, r25	; 0x06
    1d42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	69 f7       	brne	.-38     	; 0x1d26 <LCD_init+0xbc>
    1d4c:	14 c0       	rjmp	.+40     	; 0x1d76 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d50:	78 85       	ldd	r23, Y+8	; 0x08
    1d52:	89 85       	ldd	r24, Y+9	; 0x09
    1d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	9e 83       	std	Y+6, r25	; 0x06
    1d60:	8d 83       	std	Y+5, r24	; 0x05
    1d62:	8d 81       	ldd	r24, Y+5	; 0x05
    1d64:	9e 81       	ldd	r25, Y+6	; 0x06
    1d66:	9a 83       	std	Y+2, r25	; 0x02
    1d68:	89 83       	std	Y+1, r24	; 0x01
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <LCD_init+0x104>
    1d72:	9a 83       	std	Y+2, r25	; 0x02
    1d74:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1d76:	82 e0       	ldi	r24, 0x02	; 2
    1d78:	64 e0       	ldi	r22, 0x04	; 4
    1d7a:	41 e0       	ldi	r20, 0x01	; 1
    1d7c:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1d80:	82 e0       	ldi	r24, 0x02	; 2
    1d82:	65 e0       	ldi	r22, 0x05	; 5
    1d84:	41 e0       	ldi	r20, 0x01	; 1
    1d86:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1d8a:	82 e0       	ldi	r24, 0x02	; 2
    1d8c:	66 e0       	ldi	r22, 0x06	; 6
    1d8e:	41 e0       	ldi	r20, 0x01	; 1
    1d90:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1d94:	82 e0       	ldi	r24, 0x02	; 2
    1d96:	67 e0       	ldi	r22, 0x07	; 7
    1d98:	41 e0       	ldi	r20, 0x01	; 1
    1d9a:	0e 94 66 09 	call	0x12cc	; 0x12cc <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1d9e:	83 e3       	ldi	r24, 0x33	; 51
    1da0:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1da4:	82 e3       	ldi	r24, 0x32	; 50
    1da6:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1daa:	88 e2       	ldi	r24, 0x28	; 40
    1dac:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1db0:	8c e0       	ldi	r24, 0x0C	; 12
    1db2:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_sendCommand>
}
    1dbc:	2e 96       	adiw	r28, 0x0e	; 14
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	cd bf       	out	0x3d, r28	; 61
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1dce:	0f 93       	push	r16
    1dd0:	1f 93       	push	r17
    1dd2:	df 93       	push	r29
    1dd4:	cf 93       	push	r28
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	c3 56       	subi	r28, 0x63	; 99
    1ddc:	d0 40       	sbci	r29, 0x00	; 0
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	de bf       	out	0x3e, r29	; 62
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	cd bf       	out	0x3d, r28	; 61
    1de8:	fe 01       	movw	r30, r28
    1dea:	ed 59       	subi	r30, 0x9D	; 157
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	60 e0       	ldi	r22, 0x00	; 0
    1df4:	40 e0       	ldi	r20, 0x00	; 0
    1df6:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	e1 5a       	subi	r30, 0xA1	; 161
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	a0 e8       	ldi	r26, 0x80	; 128
    1e06:	bf e3       	ldi	r27, 0x3F	; 63
    1e08:	80 83       	st	Z, r24
    1e0a:	91 83       	std	Z+1, r25	; 0x01
    1e0c:	a2 83       	std	Z+2, r26	; 0x02
    1e0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e10:	8e 01       	movw	r16, r28
    1e12:	05 5a       	subi	r16, 0xA5	; 165
    1e14:	1f 4f       	sbci	r17, 0xFF	; 255
    1e16:	fe 01       	movw	r30, r28
    1e18:	e1 5a       	subi	r30, 0xA1	; 161
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	60 81       	ld	r22, Z
    1e1e:	71 81       	ldd	r23, Z+1	; 0x01
    1e20:	82 81       	ldd	r24, Z+2	; 0x02
    1e22:	93 81       	ldd	r25, Z+3	; 0x03
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	4a ef       	ldi	r20, 0xFA	; 250
    1e2a:	54 e4       	ldi	r21, 0x44	; 68
    1e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	f8 01       	movw	r30, r16
    1e36:	80 83       	st	Z, r24
    1e38:	91 83       	std	Z+1, r25	; 0x01
    1e3a:	a2 83       	std	Z+2, r26	; 0x02
    1e3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e3e:	fe 01       	movw	r30, r28
    1e40:	e5 5a       	subi	r30, 0xA5	; 165
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	60 81       	ld	r22, Z
    1e46:	71 81       	ldd	r23, Z+1	; 0x01
    1e48:	82 81       	ldd	r24, Z+2	; 0x02
    1e4a:	93 81       	ldd	r25, Z+3	; 0x03
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e8       	ldi	r20, 0x80	; 128
    1e52:	5f e3       	ldi	r21, 0x3F	; 63
    1e54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e58:	88 23       	and	r24, r24
    1e5a:	44 f4       	brge	.+16     	; 0x1e6c <LCD_sendCommand+0x9e>
		__ticks = 1;
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	e7 5a       	subi	r30, 0xA7	; 167
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	91 83       	std	Z+1, r25	; 0x01
    1e68:	80 83       	st	Z, r24
    1e6a:	64 c0       	rjmp	.+200    	; 0x1f34 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	e5 5a       	subi	r30, 0xA5	; 165
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	60 81       	ld	r22, Z
    1e74:	71 81       	ldd	r23, Z+1	; 0x01
    1e76:	82 81       	ldd	r24, Z+2	; 0x02
    1e78:	93 81       	ldd	r25, Z+3	; 0x03
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	3f ef       	ldi	r19, 0xFF	; 255
    1e7e:	4f e7       	ldi	r20, 0x7F	; 127
    1e80:	57 e4       	ldi	r21, 0x47	; 71
    1e82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e86:	18 16       	cp	r1, r24
    1e88:	0c f0       	brlt	.+2      	; 0x1e8c <LCD_sendCommand+0xbe>
    1e8a:	43 c0       	rjmp	.+134    	; 0x1f12 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	e1 5a       	subi	r30, 0xA1	; 161
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	60 81       	ld	r22, Z
    1e94:	71 81       	ldd	r23, Z+1	; 0x01
    1e96:	82 81       	ldd	r24, Z+2	; 0x02
    1e98:	93 81       	ldd	r25, Z+3	; 0x03
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e2       	ldi	r20, 0x20	; 32
    1ea0:	51 e4       	ldi	r21, 0x41	; 65
    1ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	8e 01       	movw	r16, r28
    1eac:	07 5a       	subi	r16, 0xA7	; 167
    1eae:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb0:	bc 01       	movw	r22, r24
    1eb2:	cd 01       	movw	r24, r26
    1eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	f8 01       	movw	r30, r16
    1ebe:	91 83       	std	Z+1, r25	; 0x01
    1ec0:	80 83       	st	Z, r24
    1ec2:	1f c0       	rjmp	.+62     	; 0x1f02 <LCD_sendCommand+0x134>
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	e9 5a       	subi	r30, 0xA9	; 169
    1ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eca:	88 ec       	ldi	r24, 0xC8	; 200
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	91 83       	std	Z+1, r25	; 0x01
    1ed0:	80 83       	st	Z, r24
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	e9 5a       	subi	r30, 0xA9	; 169
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	80 81       	ld	r24, Z
    1eda:	91 81       	ldd	r25, Z+1	; 0x01
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <LCD_sendCommand+0x10e>
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	e9 5a       	subi	r30, 0xA9	; 169
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	91 83       	std	Z+1, r25	; 0x01
    1ee8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eea:	de 01       	movw	r26, r28
    1eec:	a7 5a       	subi	r26, 0xA7	; 167
    1eee:	bf 4f       	sbci	r27, 0xFF	; 255
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	e7 5a       	subi	r30, 0xA7	; 167
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	80 81       	ld	r24, Z
    1ef8:	91 81       	ldd	r25, Z+1	; 0x01
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	11 96       	adiw	r26, 0x01	; 1
    1efe:	9c 93       	st	X, r25
    1f00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f02:	fe 01       	movw	r30, r28
    1f04:	e7 5a       	subi	r30, 0xA7	; 167
    1f06:	ff 4f       	sbci	r31, 0xFF	; 255
    1f08:	80 81       	ld	r24, Z
    1f0a:	91 81       	ldd	r25, Z+1	; 0x01
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	d1 f6       	brne	.-76     	; 0x1ec4 <LCD_sendCommand+0xf6>
    1f10:	27 c0       	rjmp	.+78     	; 0x1f60 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f12:	8e 01       	movw	r16, r28
    1f14:	07 5a       	subi	r16, 0xA7	; 167
    1f16:	1f 4f       	sbci	r17, 0xFF	; 255
    1f18:	fe 01       	movw	r30, r28
    1f1a:	e5 5a       	subi	r30, 0xA5	; 165
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	60 81       	ld	r22, Z
    1f20:	71 81       	ldd	r23, Z+1	; 0x01
    1f22:	82 81       	ldd	r24, Z+2	; 0x02
    1f24:	93 81       	ldd	r25, Z+3	; 0x03
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	f8 01       	movw	r30, r16
    1f30:	91 83       	std	Z+1, r25	; 0x01
    1f32:	80 83       	st	Z, r24
    1f34:	de 01       	movw	r26, r28
    1f36:	ab 5a       	subi	r26, 0xAB	; 171
    1f38:	bf 4f       	sbci	r27, 0xFF	; 255
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	e7 5a       	subi	r30, 0xA7	; 167
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	80 81       	ld	r24, Z
    1f42:	91 81       	ldd	r25, Z+1	; 0x01
    1f44:	8d 93       	st	X+, r24
    1f46:	9c 93       	st	X, r25
    1f48:	fe 01       	movw	r30, r28
    1f4a:	eb 5a       	subi	r30, 0xAB	; 171
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	80 81       	ld	r24, Z
    1f50:	91 81       	ldd	r25, Z+1	; 0x01
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	f1 f7       	brne	.-4      	; 0x1f52 <LCD_sendCommand+0x184>
    1f56:	fe 01       	movw	r30, r28
    1f58:	eb 5a       	subi	r30, 0xAB	; 171
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	91 83       	std	Z+1, r25	; 0x01
    1f5e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f60:	82 e0       	ldi	r24, 0x02	; 2
    1f62:	61 e0       	ldi	r22, 0x01	; 1
    1f64:	41 e0       	ldi	r20, 0x01	; 1
    1f66:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	ef 5a       	subi	r30, 0xAF	; 175
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a0 e8       	ldi	r26, 0x80	; 128
    1f76:	bf e3       	ldi	r27, 0x3F	; 63
    1f78:	80 83       	st	Z, r24
    1f7a:	91 83       	std	Z+1, r25	; 0x01
    1f7c:	a2 83       	std	Z+2, r26	; 0x02
    1f7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f80:	8e 01       	movw	r16, r28
    1f82:	03 5b       	subi	r16, 0xB3	; 179
    1f84:	1f 4f       	sbci	r17, 0xFF	; 255
    1f86:	fe 01       	movw	r30, r28
    1f88:	ef 5a       	subi	r30, 0xAF	; 175
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	60 81       	ld	r22, Z
    1f8e:	71 81       	ldd	r23, Z+1	; 0x01
    1f90:	82 81       	ldd	r24, Z+2	; 0x02
    1f92:	93 81       	ldd	r25, Z+3	; 0x03
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	4a ef       	ldi	r20, 0xFA	; 250
    1f9a:	54 e4       	ldi	r21, 0x44	; 68
    1f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	f8 01       	movw	r30, r16
    1fa6:	80 83       	st	Z, r24
    1fa8:	91 83       	std	Z+1, r25	; 0x01
    1faa:	a2 83       	std	Z+2, r26	; 0x02
    1fac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fae:	fe 01       	movw	r30, r28
    1fb0:	e3 5b       	subi	r30, 0xB3	; 179
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	60 81       	ld	r22, Z
    1fb6:	71 81       	ldd	r23, Z+1	; 0x01
    1fb8:	82 81       	ldd	r24, Z+2	; 0x02
    1fba:	93 81       	ldd	r25, Z+3	; 0x03
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e8       	ldi	r20, 0x80	; 128
    1fc2:	5f e3       	ldi	r21, 0x3F	; 63
    1fc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fc8:	88 23       	and	r24, r24
    1fca:	44 f4       	brge	.+16     	; 0x1fdc <LCD_sendCommand+0x20e>
		__ticks = 1;
    1fcc:	fe 01       	movw	r30, r28
    1fce:	e5 5b       	subi	r30, 0xB5	; 181
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	91 83       	std	Z+1, r25	; 0x01
    1fd8:	80 83       	st	Z, r24
    1fda:	64 c0       	rjmp	.+200    	; 0x20a4 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1fdc:	fe 01       	movw	r30, r28
    1fde:	e3 5b       	subi	r30, 0xB3	; 179
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	60 81       	ld	r22, Z
    1fe4:	71 81       	ldd	r23, Z+1	; 0x01
    1fe6:	82 81       	ldd	r24, Z+2	; 0x02
    1fe8:	93 81       	ldd	r25, Z+3	; 0x03
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	3f ef       	ldi	r19, 0xFF	; 255
    1fee:	4f e7       	ldi	r20, 0x7F	; 127
    1ff0:	57 e4       	ldi	r21, 0x47	; 71
    1ff2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ff6:	18 16       	cp	r1, r24
    1ff8:	0c f0       	brlt	.+2      	; 0x1ffc <LCD_sendCommand+0x22e>
    1ffa:	43 c0       	rjmp	.+134    	; 0x2082 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	ef 5a       	subi	r30, 0xAF	; 175
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	60 81       	ld	r22, Z
    2004:	71 81       	ldd	r23, Z+1	; 0x01
    2006:	82 81       	ldd	r24, Z+2	; 0x02
    2008:	93 81       	ldd	r25, Z+3	; 0x03
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	40 e2       	ldi	r20, 0x20	; 32
    2010:	51 e4       	ldi	r21, 0x41	; 65
    2012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	8e 01       	movw	r16, r28
    201c:	05 5b       	subi	r16, 0xB5	; 181
    201e:	1f 4f       	sbci	r17, 0xFF	; 255
    2020:	bc 01       	movw	r22, r24
    2022:	cd 01       	movw	r24, r26
    2024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	f8 01       	movw	r30, r16
    202e:	91 83       	std	Z+1, r25	; 0x01
    2030:	80 83       	st	Z, r24
    2032:	1f c0       	rjmp	.+62     	; 0x2072 <LCD_sendCommand+0x2a4>
    2034:	fe 01       	movw	r30, r28
    2036:	e7 5b       	subi	r30, 0xB7	; 183
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	88 ec       	ldi	r24, 0xC8	; 200
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	91 83       	std	Z+1, r25	; 0x01
    2040:	80 83       	st	Z, r24
    2042:	fe 01       	movw	r30, r28
    2044:	e7 5b       	subi	r30, 0xB7	; 183
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	80 81       	ld	r24, Z
    204a:	91 81       	ldd	r25, Z+1	; 0x01
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <LCD_sendCommand+0x27e>
    2050:	fe 01       	movw	r30, r28
    2052:	e7 5b       	subi	r30, 0xB7	; 183
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	91 83       	std	Z+1, r25	; 0x01
    2058:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205a:	de 01       	movw	r26, r28
    205c:	a5 5b       	subi	r26, 0xB5	; 181
    205e:	bf 4f       	sbci	r27, 0xFF	; 255
    2060:	fe 01       	movw	r30, r28
    2062:	e5 5b       	subi	r30, 0xB5	; 181
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	80 81       	ld	r24, Z
    2068:	91 81       	ldd	r25, Z+1	; 0x01
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	11 96       	adiw	r26, 0x01	; 1
    206e:	9c 93       	st	X, r25
    2070:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2072:	fe 01       	movw	r30, r28
    2074:	e5 5b       	subi	r30, 0xB5	; 181
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	80 81       	ld	r24, Z
    207a:	91 81       	ldd	r25, Z+1	; 0x01
    207c:	00 97       	sbiw	r24, 0x00	; 0
    207e:	d1 f6       	brne	.-76     	; 0x2034 <LCD_sendCommand+0x266>
    2080:	27 c0       	rjmp	.+78     	; 0x20d0 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2082:	8e 01       	movw	r16, r28
    2084:	05 5b       	subi	r16, 0xB5	; 181
    2086:	1f 4f       	sbci	r17, 0xFF	; 255
    2088:	fe 01       	movw	r30, r28
    208a:	e3 5b       	subi	r30, 0xB3	; 179
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	60 81       	ld	r22, Z
    2090:	71 81       	ldd	r23, Z+1	; 0x01
    2092:	82 81       	ldd	r24, Z+2	; 0x02
    2094:	93 81       	ldd	r25, Z+3	; 0x03
    2096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	f8 01       	movw	r30, r16
    20a0:	91 83       	std	Z+1, r25	; 0x01
    20a2:	80 83       	st	Z, r24
    20a4:	de 01       	movw	r26, r28
    20a6:	a9 5b       	subi	r26, 0xB9	; 185
    20a8:	bf 4f       	sbci	r27, 0xFF	; 255
    20aa:	fe 01       	movw	r30, r28
    20ac:	e5 5b       	subi	r30, 0xB5	; 181
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	80 81       	ld	r24, Z
    20b2:	91 81       	ldd	r25, Z+1	; 0x01
    20b4:	8d 93       	st	X+, r24
    20b6:	9c 93       	st	X, r25
    20b8:	fe 01       	movw	r30, r28
    20ba:	e9 5b       	subi	r30, 0xB9	; 185
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	80 81       	ld	r24, Z
    20c0:	91 81       	ldd	r25, Z+1	; 0x01
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <LCD_sendCommand+0x2f4>
    20c6:	fe 01       	movw	r30, r28
    20c8:	e9 5b       	subi	r30, 0xB9	; 185
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	91 83       	std	Z+1, r25	; 0x01
    20ce:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    20d0:	fe 01       	movw	r30, r28
    20d2:	ed 59       	subi	r30, 0x9D	; 157
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	80 81       	ld	r24, Z
    20d8:	88 2f       	mov	r24, r24
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	80 71       	andi	r24, 0x10	; 16
    20de:	90 70       	andi	r25, 0x00	; 0
    20e0:	95 95       	asr	r25
    20e2:	87 95       	ror	r24
    20e4:	95 95       	asr	r25
    20e6:	87 95       	ror	r24
    20e8:	95 95       	asr	r25
    20ea:	87 95       	ror	r24
    20ec:	95 95       	asr	r25
    20ee:	87 95       	ror	r24
    20f0:	98 2f       	mov	r25, r24
    20f2:	82 e0       	ldi	r24, 0x02	; 2
    20f4:	64 e0       	ldi	r22, 0x04	; 4
    20f6:	49 2f       	mov	r20, r25
    20f8:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    20fc:	fe 01       	movw	r30, r28
    20fe:	ed 59       	subi	r30, 0x9D	; 157
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	80 81       	ld	r24, Z
    2104:	88 2f       	mov	r24, r24
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	80 72       	andi	r24, 0x20	; 32
    210a:	90 70       	andi	r25, 0x00	; 0
    210c:	95 95       	asr	r25
    210e:	87 95       	ror	r24
    2110:	95 95       	asr	r25
    2112:	87 95       	ror	r24
    2114:	95 95       	asr	r25
    2116:	87 95       	ror	r24
    2118:	95 95       	asr	r25
    211a:	87 95       	ror	r24
    211c:	95 95       	asr	r25
    211e:	87 95       	ror	r24
    2120:	98 2f       	mov	r25, r24
    2122:	82 e0       	ldi	r24, 0x02	; 2
    2124:	65 e0       	ldi	r22, 0x05	; 5
    2126:	49 2f       	mov	r20, r25
    2128:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    212c:	fe 01       	movw	r30, r28
    212e:	ed 59       	subi	r30, 0x9D	; 157
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	80 81       	ld	r24, Z
    2134:	88 2f       	mov	r24, r24
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	80 74       	andi	r24, 0x40	; 64
    213a:	90 70       	andi	r25, 0x00	; 0
    213c:	08 2e       	mov	r0, r24
    213e:	89 2f       	mov	r24, r25
    2140:	00 0c       	add	r0, r0
    2142:	88 1f       	adc	r24, r24
    2144:	99 0b       	sbc	r25, r25
    2146:	00 0c       	add	r0, r0
    2148:	88 1f       	adc	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	98 2f       	mov	r25, r24
    214e:	82 e0       	ldi	r24, 0x02	; 2
    2150:	66 e0       	ldi	r22, 0x06	; 6
    2152:	49 2f       	mov	r20, r25
    2154:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2158:	fe 01       	movw	r30, r28
    215a:	ed 59       	subi	r30, 0x9D	; 157
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	80 81       	ld	r24, Z
    2160:	98 2f       	mov	r25, r24
    2162:	99 1f       	adc	r25, r25
    2164:	99 27       	eor	r25, r25
    2166:	99 1f       	adc	r25, r25
    2168:	82 e0       	ldi	r24, 0x02	; 2
    216a:	67 e0       	ldi	r22, 0x07	; 7
    216c:	49 2f       	mov	r20, r25
    216e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
    2172:	fe 01       	movw	r30, r28
    2174:	ed 5b       	subi	r30, 0xBD	; 189
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	a0 e8       	ldi	r26, 0x80	; 128
    217e:	bf e3       	ldi	r27, 0x3F	; 63
    2180:	80 83       	st	Z, r24
    2182:	91 83       	std	Z+1, r25	; 0x01
    2184:	a2 83       	std	Z+2, r26	; 0x02
    2186:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2188:	8e 01       	movw	r16, r28
    218a:	01 5c       	subi	r16, 0xC1	; 193
    218c:	1f 4f       	sbci	r17, 0xFF	; 255
    218e:	fe 01       	movw	r30, r28
    2190:	ed 5b       	subi	r30, 0xBD	; 189
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	60 81       	ld	r22, Z
    2196:	71 81       	ldd	r23, Z+1	; 0x01
    2198:	82 81       	ldd	r24, Z+2	; 0x02
    219a:	93 81       	ldd	r25, Z+3	; 0x03
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	4a ef       	ldi	r20, 0xFA	; 250
    21a2:	54 e4       	ldi	r21, 0x44	; 68
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	f8 01       	movw	r30, r16
    21ae:	80 83       	st	Z, r24
    21b0:	91 83       	std	Z+1, r25	; 0x01
    21b2:	a2 83       	std	Z+2, r26	; 0x02
    21b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21b6:	fe 01       	movw	r30, r28
    21b8:	ff 96       	adiw	r30, 0x3f	; 63
    21ba:	60 81       	ld	r22, Z
    21bc:	71 81       	ldd	r23, Z+1	; 0x01
    21be:	82 81       	ldd	r24, Z+2	; 0x02
    21c0:	93 81       	ldd	r25, Z+3	; 0x03
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e8       	ldi	r20, 0x80	; 128
    21c8:	5f e3       	ldi	r21, 0x3F	; 63
    21ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ce:	88 23       	and	r24, r24
    21d0:	2c f4       	brge	.+10     	; 0x21dc <LCD_sendCommand+0x40e>
		__ticks = 1;
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	9e af       	std	Y+62, r25	; 0x3e
    21d8:	8d af       	std	Y+61, r24	; 0x3d
    21da:	46 c0       	rjmp	.+140    	; 0x2268 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    21dc:	fe 01       	movw	r30, r28
    21de:	ff 96       	adiw	r30, 0x3f	; 63
    21e0:	60 81       	ld	r22, Z
    21e2:	71 81       	ldd	r23, Z+1	; 0x01
    21e4:	82 81       	ldd	r24, Z+2	; 0x02
    21e6:	93 81       	ldd	r25, Z+3	; 0x03
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	3f ef       	ldi	r19, 0xFF	; 255
    21ec:	4f e7       	ldi	r20, 0x7F	; 127
    21ee:	57 e4       	ldi	r21, 0x47	; 71
    21f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f4:	18 16       	cp	r1, r24
    21f6:	64 f5       	brge	.+88     	; 0x2250 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f8:	fe 01       	movw	r30, r28
    21fa:	ed 5b       	subi	r30, 0xBD	; 189
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	60 81       	ld	r22, Z
    2200:	71 81       	ldd	r23, Z+1	; 0x01
    2202:	82 81       	ldd	r24, Z+2	; 0x02
    2204:	93 81       	ldd	r25, Z+3	; 0x03
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e2       	ldi	r20, 0x20	; 32
    220c:	51 e4       	ldi	r21, 0x41	; 65
    220e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	bc 01       	movw	r22, r24
    2218:	cd 01       	movw	r24, r26
    221a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	9e af       	std	Y+62, r25	; 0x3e
    2224:	8d af       	std	Y+61, r24	; 0x3d
    2226:	0f c0       	rjmp	.+30     	; 0x2246 <LCD_sendCommand+0x478>
    2228:	88 ec       	ldi	r24, 0xC8	; 200
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	9c af       	std	Y+60, r25	; 0x3c
    222e:	8b af       	std	Y+59, r24	; 0x3b
    2230:	8b ad       	ldd	r24, Y+59	; 0x3b
    2232:	9c ad       	ldd	r25, Y+60	; 0x3c
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <LCD_sendCommand+0x466>
    2238:	9c af       	std	Y+60, r25	; 0x3c
    223a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223c:	8d ad       	ldd	r24, Y+61	; 0x3d
    223e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	9e af       	std	Y+62, r25	; 0x3e
    2244:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2246:	8d ad       	ldd	r24, Y+61	; 0x3d
    2248:	9e ad       	ldd	r25, Y+62	; 0x3e
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	69 f7       	brne	.-38     	; 0x2228 <LCD_sendCommand+0x45a>
    224e:	16 c0       	rjmp	.+44     	; 0x227c <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2250:	fe 01       	movw	r30, r28
    2252:	ff 96       	adiw	r30, 0x3f	; 63
    2254:	60 81       	ld	r22, Z
    2256:	71 81       	ldd	r23, Z+1	; 0x01
    2258:	82 81       	ldd	r24, Z+2	; 0x02
    225a:	93 81       	ldd	r25, Z+3	; 0x03
    225c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	9e af       	std	Y+62, r25	; 0x3e
    2266:	8d af       	std	Y+61, r24	; 0x3d
    2268:	8d ad       	ldd	r24, Y+61	; 0x3d
    226a:	9e ad       	ldd	r25, Y+62	; 0x3e
    226c:	9a af       	std	Y+58, r25	; 0x3a
    226e:	89 af       	std	Y+57, r24	; 0x39
    2270:	89 ad       	ldd	r24, Y+57	; 0x39
    2272:	9a ad       	ldd	r25, Y+58	; 0x3a
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <LCD_sendCommand+0x4a6>
    2278:	9a af       	std	Y+58, r25	; 0x3a
    227a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    227c:	82 e0       	ldi	r24, 0x02	; 2
    227e:	61 e0       	ldi	r22, 0x01	; 1
    2280:	40 e0       	ldi	r20, 0x00	; 0
    2282:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	a0 e8       	ldi	r26, 0x80	; 128
    228c:	bf e3       	ldi	r27, 0x3F	; 63
    228e:	8d ab       	std	Y+53, r24	; 0x35
    2290:	9e ab       	std	Y+54, r25	; 0x36
    2292:	af ab       	std	Y+55, r26	; 0x37
    2294:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2296:	6d a9       	ldd	r22, Y+53	; 0x35
    2298:	7e a9       	ldd	r23, Y+54	; 0x36
    229a:	8f a9       	ldd	r24, Y+55	; 0x37
    229c:	98 ad       	ldd	r25, Y+56	; 0x38
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	4a ef       	ldi	r20, 0xFA	; 250
    22a4:	54 e4       	ldi	r21, 0x44	; 68
    22a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	89 ab       	std	Y+49, r24	; 0x31
    22b0:	9a ab       	std	Y+50, r25	; 0x32
    22b2:	ab ab       	std	Y+51, r26	; 0x33
    22b4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22b6:	69 a9       	ldd	r22, Y+49	; 0x31
    22b8:	7a a9       	ldd	r23, Y+50	; 0x32
    22ba:	8b a9       	ldd	r24, Y+51	; 0x33
    22bc:	9c a9       	ldd	r25, Y+52	; 0x34
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	40 e8       	ldi	r20, 0x80	; 128
    22c4:	5f e3       	ldi	r21, 0x3F	; 63
    22c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ca:	88 23       	and	r24, r24
    22cc:	2c f4       	brge	.+10     	; 0x22d8 <LCD_sendCommand+0x50a>
		__ticks = 1;
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	98 ab       	std	Y+48, r25	; 0x30
    22d4:	8f a7       	std	Y+47, r24	; 0x2f
    22d6:	3f c0       	rjmp	.+126    	; 0x2356 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    22d8:	69 a9       	ldd	r22, Y+49	; 0x31
    22da:	7a a9       	ldd	r23, Y+50	; 0x32
    22dc:	8b a9       	ldd	r24, Y+51	; 0x33
    22de:	9c a9       	ldd	r25, Y+52	; 0x34
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	3f ef       	ldi	r19, 0xFF	; 255
    22e4:	4f e7       	ldi	r20, 0x7F	; 127
    22e6:	57 e4       	ldi	r21, 0x47	; 71
    22e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ec:	18 16       	cp	r1, r24
    22ee:	4c f5       	brge	.+82     	; 0x2342 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f0:	6d a9       	ldd	r22, Y+53	; 0x35
    22f2:	7e a9       	ldd	r23, Y+54	; 0x36
    22f4:	8f a9       	ldd	r24, Y+55	; 0x37
    22f6:	98 ad       	ldd	r25, Y+56	; 0x38
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	40 e2       	ldi	r20, 0x20	; 32
    22fe:	51 e4       	ldi	r21, 0x41	; 65
    2300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	bc 01       	movw	r22, r24
    230a:	cd 01       	movw	r24, r26
    230c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	98 ab       	std	Y+48, r25	; 0x30
    2316:	8f a7       	std	Y+47, r24	; 0x2f
    2318:	0f c0       	rjmp	.+30     	; 0x2338 <LCD_sendCommand+0x56a>
    231a:	88 ec       	ldi	r24, 0xC8	; 200
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	9e a7       	std	Y+46, r25	; 0x2e
    2320:	8d a7       	std	Y+45, r24	; 0x2d
    2322:	8d a5       	ldd	r24, Y+45	; 0x2d
    2324:	9e a5       	ldd	r25, Y+46	; 0x2e
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	f1 f7       	brne	.-4      	; 0x2326 <LCD_sendCommand+0x558>
    232a:	9e a7       	std	Y+46, r25	; 0x2e
    232c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2330:	98 a9       	ldd	r25, Y+48	; 0x30
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	98 ab       	std	Y+48, r25	; 0x30
    2336:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2338:	8f a5       	ldd	r24, Y+47	; 0x2f
    233a:	98 a9       	ldd	r25, Y+48	; 0x30
    233c:	00 97       	sbiw	r24, 0x00	; 0
    233e:	69 f7       	brne	.-38     	; 0x231a <LCD_sendCommand+0x54c>
    2340:	14 c0       	rjmp	.+40     	; 0x236a <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2342:	69 a9       	ldd	r22, Y+49	; 0x31
    2344:	7a a9       	ldd	r23, Y+50	; 0x32
    2346:	8b a9       	ldd	r24, Y+51	; 0x33
    2348:	9c a9       	ldd	r25, Y+52	; 0x34
    234a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	98 ab       	std	Y+48, r25	; 0x30
    2354:	8f a7       	std	Y+47, r24	; 0x2f
    2356:	8f a5       	ldd	r24, Y+47	; 0x2f
    2358:	98 a9       	ldd	r25, Y+48	; 0x30
    235a:	9c a7       	std	Y+44, r25	; 0x2c
    235c:	8b a7       	std	Y+43, r24	; 0x2b
    235e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2360:	9c a5       	ldd	r25, Y+44	; 0x2c
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	f1 f7       	brne	.-4      	; 0x2362 <LCD_sendCommand+0x594>
    2366:	9c a7       	std	Y+44, r25	; 0x2c
    2368:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    236a:	82 e0       	ldi	r24, 0x02	; 2
    236c:	61 e0       	ldi	r22, 0x01	; 1
    236e:	41 e0       	ldi	r20, 0x01	; 1
    2370:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	a0 e8       	ldi	r26, 0x80	; 128
    237a:	bf e3       	ldi	r27, 0x3F	; 63
    237c:	8f a3       	std	Y+39, r24	; 0x27
    237e:	98 a7       	std	Y+40, r25	; 0x28
    2380:	a9 a7       	std	Y+41, r26	; 0x29
    2382:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2384:	6f a1       	ldd	r22, Y+39	; 0x27
    2386:	78 a5       	ldd	r23, Y+40	; 0x28
    2388:	89 a5       	ldd	r24, Y+41	; 0x29
    238a:	9a a5       	ldd	r25, Y+42	; 0x2a
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	4a ef       	ldi	r20, 0xFA	; 250
    2392:	54 e4       	ldi	r21, 0x44	; 68
    2394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	8b a3       	std	Y+35, r24	; 0x23
    239e:	9c a3       	std	Y+36, r25	; 0x24
    23a0:	ad a3       	std	Y+37, r26	; 0x25
    23a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23a4:	6b a1       	ldd	r22, Y+35	; 0x23
    23a6:	7c a1       	ldd	r23, Y+36	; 0x24
    23a8:	8d a1       	ldd	r24, Y+37	; 0x25
    23aa:	9e a1       	ldd	r25, Y+38	; 0x26
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	40 e8       	ldi	r20, 0x80	; 128
    23b2:	5f e3       	ldi	r21, 0x3F	; 63
    23b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b8:	88 23       	and	r24, r24
    23ba:	2c f4       	brge	.+10     	; 0x23c6 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	9a a3       	std	Y+34, r25	; 0x22
    23c2:	89 a3       	std	Y+33, r24	; 0x21
    23c4:	3f c0       	rjmp	.+126    	; 0x2444 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    23c6:	6b a1       	ldd	r22, Y+35	; 0x23
    23c8:	7c a1       	ldd	r23, Y+36	; 0x24
    23ca:	8d a1       	ldd	r24, Y+37	; 0x25
    23cc:	9e a1       	ldd	r25, Y+38	; 0x26
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	3f ef       	ldi	r19, 0xFF	; 255
    23d2:	4f e7       	ldi	r20, 0x7F	; 127
    23d4:	57 e4       	ldi	r21, 0x47	; 71
    23d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23da:	18 16       	cp	r1, r24
    23dc:	4c f5       	brge	.+82     	; 0x2430 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23de:	6f a1       	ldd	r22, Y+39	; 0x27
    23e0:	78 a5       	ldd	r23, Y+40	; 0x28
    23e2:	89 a5       	ldd	r24, Y+41	; 0x29
    23e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	40 e2       	ldi	r20, 0x20	; 32
    23ec:	51 e4       	ldi	r21, 0x41	; 65
    23ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	bc 01       	movw	r22, r24
    23f8:	cd 01       	movw	r24, r26
    23fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	9a a3       	std	Y+34, r25	; 0x22
    2404:	89 a3       	std	Y+33, r24	; 0x21
    2406:	0f c0       	rjmp	.+30     	; 0x2426 <LCD_sendCommand+0x658>
    2408:	88 ec       	ldi	r24, 0xC8	; 200
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	98 a3       	std	Y+32, r25	; 0x20
    240e:	8f 8f       	std	Y+31, r24	; 0x1f
    2410:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2412:	98 a1       	ldd	r25, Y+32	; 0x20
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <LCD_sendCommand+0x646>
    2418:	98 a3       	std	Y+32, r25	; 0x20
    241a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241c:	89 a1       	ldd	r24, Y+33	; 0x21
    241e:	9a a1       	ldd	r25, Y+34	; 0x22
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	9a a3       	std	Y+34, r25	; 0x22
    2424:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2426:	89 a1       	ldd	r24, Y+33	; 0x21
    2428:	9a a1       	ldd	r25, Y+34	; 0x22
    242a:	00 97       	sbiw	r24, 0x00	; 0
    242c:	69 f7       	brne	.-38     	; 0x2408 <LCD_sendCommand+0x63a>
    242e:	14 c0       	rjmp	.+40     	; 0x2458 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2430:	6b a1       	ldd	r22, Y+35	; 0x23
    2432:	7c a1       	ldd	r23, Y+36	; 0x24
    2434:	8d a1       	ldd	r24, Y+37	; 0x25
    2436:	9e a1       	ldd	r25, Y+38	; 0x26
    2438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	9a a3       	std	Y+34, r25	; 0x22
    2442:	89 a3       	std	Y+33, r24	; 0x21
    2444:	89 a1       	ldd	r24, Y+33	; 0x21
    2446:	9a a1       	ldd	r25, Y+34	; 0x22
    2448:	9e 8f       	std	Y+30, r25	; 0x1e
    244a:	8d 8f       	std	Y+29, r24	; 0x1d
    244c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    244e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	f1 f7       	brne	.-4      	; 0x2450 <LCD_sendCommand+0x682>
    2454:	9e 8f       	std	Y+30, r25	; 0x1e
    2456:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2458:	fe 01       	movw	r30, r28
    245a:	ed 59       	subi	r30, 0x9D	; 157
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	80 81       	ld	r24, Z
    2460:	98 2f       	mov	r25, r24
    2462:	91 70       	andi	r25, 0x01	; 1
    2464:	82 e0       	ldi	r24, 0x02	; 2
    2466:	64 e0       	ldi	r22, 0x04	; 4
    2468:	49 2f       	mov	r20, r25
    246a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    246e:	fe 01       	movw	r30, r28
    2470:	ed 59       	subi	r30, 0x9D	; 157
    2472:	ff 4f       	sbci	r31, 0xFF	; 255
    2474:	80 81       	ld	r24, Z
    2476:	88 2f       	mov	r24, r24
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	82 70       	andi	r24, 0x02	; 2
    247c:	90 70       	andi	r25, 0x00	; 0
    247e:	95 95       	asr	r25
    2480:	87 95       	ror	r24
    2482:	98 2f       	mov	r25, r24
    2484:	82 e0       	ldi	r24, 0x02	; 2
    2486:	65 e0       	ldi	r22, 0x05	; 5
    2488:	49 2f       	mov	r20, r25
    248a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    248e:	fe 01       	movw	r30, r28
    2490:	ed 59       	subi	r30, 0x9D	; 157
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	80 81       	ld	r24, Z
    2496:	88 2f       	mov	r24, r24
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	84 70       	andi	r24, 0x04	; 4
    249c:	90 70       	andi	r25, 0x00	; 0
    249e:	95 95       	asr	r25
    24a0:	87 95       	ror	r24
    24a2:	95 95       	asr	r25
    24a4:	87 95       	ror	r24
    24a6:	98 2f       	mov	r25, r24
    24a8:	82 e0       	ldi	r24, 0x02	; 2
    24aa:	66 e0       	ldi	r22, 0x06	; 6
    24ac:	49 2f       	mov	r20, r25
    24ae:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    24b2:	fe 01       	movw	r30, r28
    24b4:	ed 59       	subi	r30, 0x9D	; 157
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	80 81       	ld	r24, Z
    24ba:	88 2f       	mov	r24, r24
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	88 70       	andi	r24, 0x08	; 8
    24c0:	90 70       	andi	r25, 0x00	; 0
    24c2:	95 95       	asr	r25
    24c4:	87 95       	ror	r24
    24c6:	95 95       	asr	r25
    24c8:	87 95       	ror	r24
    24ca:	95 95       	asr	r25
    24cc:	87 95       	ror	r24
    24ce:	98 2f       	mov	r25, r24
    24d0:	82 e0       	ldi	r24, 0x02	; 2
    24d2:	67 e0       	ldi	r22, 0x07	; 7
    24d4:	49 2f       	mov	r20, r25
    24d6:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	a0 e8       	ldi	r26, 0x80	; 128
    24e0:	bf e3       	ldi	r27, 0x3F	; 63
    24e2:	89 8f       	std	Y+25, r24	; 0x19
    24e4:	9a 8f       	std	Y+26, r25	; 0x1a
    24e6:	ab 8f       	std	Y+27, r26	; 0x1b
    24e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ea:	69 8d       	ldd	r22, Y+25	; 0x19
    24ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	4a ef       	ldi	r20, 0xFA	; 250
    24f8:	54 e4       	ldi	r21, 0x44	; 68
    24fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	8d 8b       	std	Y+21, r24	; 0x15
    2504:	9e 8b       	std	Y+22, r25	; 0x16
    2506:	af 8b       	std	Y+23, r26	; 0x17
    2508:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    250a:	6d 89       	ldd	r22, Y+21	; 0x15
    250c:	7e 89       	ldd	r23, Y+22	; 0x16
    250e:	8f 89       	ldd	r24, Y+23	; 0x17
    2510:	98 8d       	ldd	r25, Y+24	; 0x18
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	40 e8       	ldi	r20, 0x80	; 128
    2518:	5f e3       	ldi	r21, 0x3F	; 63
    251a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    251e:	88 23       	and	r24, r24
    2520:	2c f4       	brge	.+10     	; 0x252c <LCD_sendCommand+0x75e>
		__ticks = 1;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	9c 8b       	std	Y+20, r25	; 0x14
    2528:	8b 8b       	std	Y+19, r24	; 0x13
    252a:	3f c0       	rjmp	.+126    	; 0x25aa <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    252c:	6d 89       	ldd	r22, Y+21	; 0x15
    252e:	7e 89       	ldd	r23, Y+22	; 0x16
    2530:	8f 89       	ldd	r24, Y+23	; 0x17
    2532:	98 8d       	ldd	r25, Y+24	; 0x18
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	3f ef       	ldi	r19, 0xFF	; 255
    2538:	4f e7       	ldi	r20, 0x7F	; 127
    253a:	57 e4       	ldi	r21, 0x47	; 71
    253c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2540:	18 16       	cp	r1, r24
    2542:	4c f5       	brge	.+82     	; 0x2596 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2544:	69 8d       	ldd	r22, Y+25	; 0x19
    2546:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2548:	8b 8d       	ldd	r24, Y+27	; 0x1b
    254a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e2       	ldi	r20, 0x20	; 32
    2552:	51 e4       	ldi	r21, 0x41	; 65
    2554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	bc 01       	movw	r22, r24
    255e:	cd 01       	movw	r24, r26
    2560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	9c 8b       	std	Y+20, r25	; 0x14
    256a:	8b 8b       	std	Y+19, r24	; 0x13
    256c:	0f c0       	rjmp	.+30     	; 0x258c <LCD_sendCommand+0x7be>
    256e:	88 ec       	ldi	r24, 0xC8	; 200
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	9a 8b       	std	Y+18, r25	; 0x12
    2574:	89 8b       	std	Y+17, r24	; 0x11
    2576:	89 89       	ldd	r24, Y+17	; 0x11
    2578:	9a 89       	ldd	r25, Y+18	; 0x12
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <LCD_sendCommand+0x7ac>
    257e:	9a 8b       	std	Y+18, r25	; 0x12
    2580:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2582:	8b 89       	ldd	r24, Y+19	; 0x13
    2584:	9c 89       	ldd	r25, Y+20	; 0x14
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	9c 8b       	std	Y+20, r25	; 0x14
    258a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258c:	8b 89       	ldd	r24, Y+19	; 0x13
    258e:	9c 89       	ldd	r25, Y+20	; 0x14
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	69 f7       	brne	.-38     	; 0x256e <LCD_sendCommand+0x7a0>
    2594:	14 c0       	rjmp	.+40     	; 0x25be <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2596:	6d 89       	ldd	r22, Y+21	; 0x15
    2598:	7e 89       	ldd	r23, Y+22	; 0x16
    259a:	8f 89       	ldd	r24, Y+23	; 0x17
    259c:	98 8d       	ldd	r25, Y+24	; 0x18
    259e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	9c 8b       	std	Y+20, r25	; 0x14
    25a8:	8b 8b       	std	Y+19, r24	; 0x13
    25aa:	8b 89       	ldd	r24, Y+19	; 0x13
    25ac:	9c 89       	ldd	r25, Y+20	; 0x14
    25ae:	98 8b       	std	Y+16, r25	; 0x10
    25b0:	8f 87       	std	Y+15, r24	; 0x0f
    25b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b4:	98 89       	ldd	r25, Y+16	; 0x10
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <LCD_sendCommand+0x7e8>
    25ba:	98 8b       	std	Y+16, r25	; 0x10
    25bc:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    25be:	82 e0       	ldi	r24, 0x02	; 2
    25c0:	61 e0       	ldi	r22, 0x01	; 1
    25c2:	40 e0       	ldi	r20, 0x00	; 0
    25c4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	a0 e8       	ldi	r26, 0x80	; 128
    25ce:	bf e3       	ldi	r27, 0x3F	; 63
    25d0:	8b 87       	std	Y+11, r24	; 0x0b
    25d2:	9c 87       	std	Y+12, r25	; 0x0c
    25d4:	ad 87       	std	Y+13, r26	; 0x0d
    25d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25da:	7c 85       	ldd	r23, Y+12	; 0x0c
    25dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    25de:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	4a ef       	ldi	r20, 0xFA	; 250
    25e6:	54 e4       	ldi	r21, 0x44	; 68
    25e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	8f 83       	std	Y+7, r24	; 0x07
    25f2:	98 87       	std	Y+8, r25	; 0x08
    25f4:	a9 87       	std	Y+9, r26	; 0x09
    25f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25f8:	6f 81       	ldd	r22, Y+7	; 0x07
    25fa:	78 85       	ldd	r23, Y+8	; 0x08
    25fc:	89 85       	ldd	r24, Y+9	; 0x09
    25fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e8       	ldi	r20, 0x80	; 128
    2606:	5f e3       	ldi	r21, 0x3F	; 63
    2608:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    260c:	88 23       	and	r24, r24
    260e:	2c f4       	brge	.+10     	; 0x261a <LCD_sendCommand+0x84c>
		__ticks = 1;
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	9e 83       	std	Y+6, r25	; 0x06
    2616:	8d 83       	std	Y+5, r24	; 0x05
    2618:	3f c0       	rjmp	.+126    	; 0x2698 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    261a:	6f 81       	ldd	r22, Y+7	; 0x07
    261c:	78 85       	ldd	r23, Y+8	; 0x08
    261e:	89 85       	ldd	r24, Y+9	; 0x09
    2620:	9a 85       	ldd	r25, Y+10	; 0x0a
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	3f ef       	ldi	r19, 0xFF	; 255
    2626:	4f e7       	ldi	r20, 0x7F	; 127
    2628:	57 e4       	ldi	r21, 0x47	; 71
    262a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    262e:	18 16       	cp	r1, r24
    2630:	4c f5       	brge	.+82     	; 0x2684 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2632:	6b 85       	ldd	r22, Y+11	; 0x0b
    2634:	7c 85       	ldd	r23, Y+12	; 0x0c
    2636:	8d 85       	ldd	r24, Y+13	; 0x0d
    2638:	9e 85       	ldd	r25, Y+14	; 0x0e
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e2       	ldi	r20, 0x20	; 32
    2640:	51 e4       	ldi	r21, 0x41	; 65
    2642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	bc 01       	movw	r22, r24
    264c:	cd 01       	movw	r24, r26
    264e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	9e 83       	std	Y+6, r25	; 0x06
    2658:	8d 83       	std	Y+5, r24	; 0x05
    265a:	0f c0       	rjmp	.+30     	; 0x267a <LCD_sendCommand+0x8ac>
    265c:	88 ec       	ldi	r24, 0xC8	; 200
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	9c 83       	std	Y+4, r25	; 0x04
    2662:	8b 83       	std	Y+3, r24	; 0x03
    2664:	8b 81       	ldd	r24, Y+3	; 0x03
    2666:	9c 81       	ldd	r25, Y+4	; 0x04
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	f1 f7       	brne	.-4      	; 0x2668 <LCD_sendCommand+0x89a>
    266c:	9c 83       	std	Y+4, r25	; 0x04
    266e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2670:	8d 81       	ldd	r24, Y+5	; 0x05
    2672:	9e 81       	ldd	r25, Y+6	; 0x06
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	9e 83       	std	Y+6, r25	; 0x06
    2678:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    267a:	8d 81       	ldd	r24, Y+5	; 0x05
    267c:	9e 81       	ldd	r25, Y+6	; 0x06
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	69 f7       	brne	.-38     	; 0x265c <LCD_sendCommand+0x88e>
    2682:	14 c0       	rjmp	.+40     	; 0x26ac <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2684:	6f 81       	ldd	r22, Y+7	; 0x07
    2686:	78 85       	ldd	r23, Y+8	; 0x08
    2688:	89 85       	ldd	r24, Y+9	; 0x09
    268a:	9a 85       	ldd	r25, Y+10	; 0x0a
    268c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	9e 83       	std	Y+6, r25	; 0x06
    2696:	8d 83       	std	Y+5, r24	; 0x05
    2698:	8d 81       	ldd	r24, Y+5	; 0x05
    269a:	9e 81       	ldd	r25, Y+6	; 0x06
    269c:	9a 83       	std	Y+2, r25	; 0x02
    269e:	89 83       	std	Y+1, r24	; 0x01
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	9a 81       	ldd	r25, Y+2	; 0x02
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <LCD_sendCommand+0x8d6>
    26a8:	9a 83       	std	Y+2, r25	; 0x02
    26aa:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    26ac:	cd 59       	subi	r28, 0x9D	; 157
    26ae:	df 4f       	sbci	r29, 0xFF	; 255
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	f8 94       	cli
    26b4:	de bf       	out	0x3e, r29	; 62
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	cd bf       	out	0x3d, r28	; 61
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	1f 91       	pop	r17
    26c0:	0f 91       	pop	r16
    26c2:	08 95       	ret

000026c4 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    26c4:	0f 93       	push	r16
    26c6:	1f 93       	push	r17
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	c3 56       	subi	r28, 0x63	; 99
    26d2:	d0 40       	sbci	r29, 0x00	; 0
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	f8 94       	cli
    26d8:	de bf       	out	0x3e, r29	; 62
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	cd bf       	out	0x3d, r28	; 61
    26de:	fe 01       	movw	r30, r28
    26e0:	ed 59       	subi	r30, 0x9D	; 157
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    26e6:	82 e0       	ldi	r24, 0x02	; 2
    26e8:	60 e0       	ldi	r22, 0x00	; 0
    26ea:	41 e0       	ldi	r20, 0x01	; 1
    26ec:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
    26f0:	fe 01       	movw	r30, r28
    26f2:	e1 5a       	subi	r30, 0xA1	; 161
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	a0 e8       	ldi	r26, 0x80	; 128
    26fc:	bf e3       	ldi	r27, 0x3F	; 63
    26fe:	80 83       	st	Z, r24
    2700:	91 83       	std	Z+1, r25	; 0x01
    2702:	a2 83       	std	Z+2, r26	; 0x02
    2704:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2706:	8e 01       	movw	r16, r28
    2708:	05 5a       	subi	r16, 0xA5	; 165
    270a:	1f 4f       	sbci	r17, 0xFF	; 255
    270c:	fe 01       	movw	r30, r28
    270e:	e1 5a       	subi	r30, 0xA1	; 161
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	60 81       	ld	r22, Z
    2714:	71 81       	ldd	r23, Z+1	; 0x01
    2716:	82 81       	ldd	r24, Z+2	; 0x02
    2718:	93 81       	ldd	r25, Z+3	; 0x03
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	4a ef       	ldi	r20, 0xFA	; 250
    2720:	54 e4       	ldi	r21, 0x44	; 68
    2722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	f8 01       	movw	r30, r16
    272c:	80 83       	st	Z, r24
    272e:	91 83       	std	Z+1, r25	; 0x01
    2730:	a2 83       	std	Z+2, r26	; 0x02
    2732:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2734:	fe 01       	movw	r30, r28
    2736:	e5 5a       	subi	r30, 0xA5	; 165
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	60 81       	ld	r22, Z
    273c:	71 81       	ldd	r23, Z+1	; 0x01
    273e:	82 81       	ldd	r24, Z+2	; 0x02
    2740:	93 81       	ldd	r25, Z+3	; 0x03
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 e8       	ldi	r20, 0x80	; 128
    2748:	5f e3       	ldi	r21, 0x3F	; 63
    274a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    274e:	88 23       	and	r24, r24
    2750:	44 f4       	brge	.+16     	; 0x2762 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2752:	fe 01       	movw	r30, r28
    2754:	e7 5a       	subi	r30, 0xA7	; 167
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	80 83       	st	Z, r24
    2760:	64 c0       	rjmp	.+200    	; 0x282a <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2762:	fe 01       	movw	r30, r28
    2764:	e5 5a       	subi	r30, 0xA5	; 165
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	60 81       	ld	r22, Z
    276a:	71 81       	ldd	r23, Z+1	; 0x01
    276c:	82 81       	ldd	r24, Z+2	; 0x02
    276e:	93 81       	ldd	r25, Z+3	; 0x03
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	3f ef       	ldi	r19, 0xFF	; 255
    2774:	4f e7       	ldi	r20, 0x7F	; 127
    2776:	57 e4       	ldi	r21, 0x47	; 71
    2778:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    277c:	18 16       	cp	r1, r24
    277e:	0c f0       	brlt	.+2      	; 0x2782 <LCD_displayCharacter+0xbe>
    2780:	43 c0       	rjmp	.+134    	; 0x2808 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2782:	fe 01       	movw	r30, r28
    2784:	e1 5a       	subi	r30, 0xA1	; 161
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	60 81       	ld	r22, Z
    278a:	71 81       	ldd	r23, Z+1	; 0x01
    278c:	82 81       	ldd	r24, Z+2	; 0x02
    278e:	93 81       	ldd	r25, Z+3	; 0x03
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e2       	ldi	r20, 0x20	; 32
    2796:	51 e4       	ldi	r21, 0x41	; 65
    2798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	8e 01       	movw	r16, r28
    27a2:	07 5a       	subi	r16, 0xA7	; 167
    27a4:	1f 4f       	sbci	r17, 0xFF	; 255
    27a6:	bc 01       	movw	r22, r24
    27a8:	cd 01       	movw	r24, r26
    27aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	f8 01       	movw	r30, r16
    27b4:	91 83       	std	Z+1, r25	; 0x01
    27b6:	80 83       	st	Z, r24
    27b8:	1f c0       	rjmp	.+62     	; 0x27f8 <LCD_displayCharacter+0x134>
    27ba:	fe 01       	movw	r30, r28
    27bc:	e9 5a       	subi	r30, 0xA9	; 169
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	88 ec       	ldi	r24, 0xC8	; 200
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	91 83       	std	Z+1, r25	; 0x01
    27c6:	80 83       	st	Z, r24
    27c8:	fe 01       	movw	r30, r28
    27ca:	e9 5a       	subi	r30, 0xA9	; 169
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	80 81       	ld	r24, Z
    27d0:	91 81       	ldd	r25, Z+1	; 0x01
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	f1 f7       	brne	.-4      	; 0x27d2 <LCD_displayCharacter+0x10e>
    27d6:	fe 01       	movw	r30, r28
    27d8:	e9 5a       	subi	r30, 0xA9	; 169
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	91 83       	std	Z+1, r25	; 0x01
    27de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e0:	de 01       	movw	r26, r28
    27e2:	a7 5a       	subi	r26, 0xA7	; 167
    27e4:	bf 4f       	sbci	r27, 0xFF	; 255
    27e6:	fe 01       	movw	r30, r28
    27e8:	e7 5a       	subi	r30, 0xA7	; 167
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	80 81       	ld	r24, Z
    27ee:	91 81       	ldd	r25, Z+1	; 0x01
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	11 96       	adiw	r26, 0x01	; 1
    27f4:	9c 93       	st	X, r25
    27f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f8:	fe 01       	movw	r30, r28
    27fa:	e7 5a       	subi	r30, 0xA7	; 167
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	80 81       	ld	r24, Z
    2800:	91 81       	ldd	r25, Z+1	; 0x01
    2802:	00 97       	sbiw	r24, 0x00	; 0
    2804:	d1 f6       	brne	.-76     	; 0x27ba <LCD_displayCharacter+0xf6>
    2806:	27 c0       	rjmp	.+78     	; 0x2856 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2808:	8e 01       	movw	r16, r28
    280a:	07 5a       	subi	r16, 0xA7	; 167
    280c:	1f 4f       	sbci	r17, 0xFF	; 255
    280e:	fe 01       	movw	r30, r28
    2810:	e5 5a       	subi	r30, 0xA5	; 165
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	60 81       	ld	r22, Z
    2816:	71 81       	ldd	r23, Z+1	; 0x01
    2818:	82 81       	ldd	r24, Z+2	; 0x02
    281a:	93 81       	ldd	r25, Z+3	; 0x03
    281c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	f8 01       	movw	r30, r16
    2826:	91 83       	std	Z+1, r25	; 0x01
    2828:	80 83       	st	Z, r24
    282a:	de 01       	movw	r26, r28
    282c:	ab 5a       	subi	r26, 0xAB	; 171
    282e:	bf 4f       	sbci	r27, 0xFF	; 255
    2830:	fe 01       	movw	r30, r28
    2832:	e7 5a       	subi	r30, 0xA7	; 167
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	80 81       	ld	r24, Z
    2838:	91 81       	ldd	r25, Z+1	; 0x01
    283a:	8d 93       	st	X+, r24
    283c:	9c 93       	st	X, r25
    283e:	fe 01       	movw	r30, r28
    2840:	eb 5a       	subi	r30, 0xAB	; 171
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	80 81       	ld	r24, Z
    2846:	91 81       	ldd	r25, Z+1	; 0x01
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <LCD_displayCharacter+0x184>
    284c:	fe 01       	movw	r30, r28
    284e:	eb 5a       	subi	r30, 0xAB	; 171
    2850:	ff 4f       	sbci	r31, 0xFF	; 255
    2852:	91 83       	std	Z+1, r25	; 0x01
    2854:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2856:	82 e0       	ldi	r24, 0x02	; 2
    2858:	61 e0       	ldi	r22, 0x01	; 1
    285a:	41 e0       	ldi	r20, 0x01	; 1
    285c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
    2860:	fe 01       	movw	r30, r28
    2862:	ef 5a       	subi	r30, 0xAF	; 175
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	a0 e8       	ldi	r26, 0x80	; 128
    286c:	bf e3       	ldi	r27, 0x3F	; 63
    286e:	80 83       	st	Z, r24
    2870:	91 83       	std	Z+1, r25	; 0x01
    2872:	a2 83       	std	Z+2, r26	; 0x02
    2874:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2876:	8e 01       	movw	r16, r28
    2878:	03 5b       	subi	r16, 0xB3	; 179
    287a:	1f 4f       	sbci	r17, 0xFF	; 255
    287c:	fe 01       	movw	r30, r28
    287e:	ef 5a       	subi	r30, 0xAF	; 175
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	60 81       	ld	r22, Z
    2884:	71 81       	ldd	r23, Z+1	; 0x01
    2886:	82 81       	ldd	r24, Z+2	; 0x02
    2888:	93 81       	ldd	r25, Z+3	; 0x03
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	4a ef       	ldi	r20, 0xFA	; 250
    2890:	54 e4       	ldi	r21, 0x44	; 68
    2892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	f8 01       	movw	r30, r16
    289c:	80 83       	st	Z, r24
    289e:	91 83       	std	Z+1, r25	; 0x01
    28a0:	a2 83       	std	Z+2, r26	; 0x02
    28a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28a4:	fe 01       	movw	r30, r28
    28a6:	e3 5b       	subi	r30, 0xB3	; 179
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	60 81       	ld	r22, Z
    28ac:	71 81       	ldd	r23, Z+1	; 0x01
    28ae:	82 81       	ldd	r24, Z+2	; 0x02
    28b0:	93 81       	ldd	r25, Z+3	; 0x03
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e8       	ldi	r20, 0x80	; 128
    28b8:	5f e3       	ldi	r21, 0x3F	; 63
    28ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28be:	88 23       	and	r24, r24
    28c0:	44 f4       	brge	.+16     	; 0x28d2 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    28c2:	fe 01       	movw	r30, r28
    28c4:	e5 5b       	subi	r30, 0xB5	; 181
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	91 83       	std	Z+1, r25	; 0x01
    28ce:	80 83       	st	Z, r24
    28d0:	64 c0       	rjmp	.+200    	; 0x299a <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    28d2:	fe 01       	movw	r30, r28
    28d4:	e3 5b       	subi	r30, 0xB3	; 179
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	60 81       	ld	r22, Z
    28da:	71 81       	ldd	r23, Z+1	; 0x01
    28dc:	82 81       	ldd	r24, Z+2	; 0x02
    28de:	93 81       	ldd	r25, Z+3	; 0x03
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	3f ef       	ldi	r19, 0xFF	; 255
    28e4:	4f e7       	ldi	r20, 0x7F	; 127
    28e6:	57 e4       	ldi	r21, 0x47	; 71
    28e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28ec:	18 16       	cp	r1, r24
    28ee:	0c f0       	brlt	.+2      	; 0x28f2 <LCD_displayCharacter+0x22e>
    28f0:	43 c0       	rjmp	.+134    	; 0x2978 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f2:	fe 01       	movw	r30, r28
    28f4:	ef 5a       	subi	r30, 0xAF	; 175
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	60 81       	ld	r22, Z
    28fa:	71 81       	ldd	r23, Z+1	; 0x01
    28fc:	82 81       	ldd	r24, Z+2	; 0x02
    28fe:	93 81       	ldd	r25, Z+3	; 0x03
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e2       	ldi	r20, 0x20	; 32
    2906:	51 e4       	ldi	r21, 0x41	; 65
    2908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	8e 01       	movw	r16, r28
    2912:	05 5b       	subi	r16, 0xB5	; 181
    2914:	1f 4f       	sbci	r17, 0xFF	; 255
    2916:	bc 01       	movw	r22, r24
    2918:	cd 01       	movw	r24, r26
    291a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	f8 01       	movw	r30, r16
    2924:	91 83       	std	Z+1, r25	; 0x01
    2926:	80 83       	st	Z, r24
    2928:	1f c0       	rjmp	.+62     	; 0x2968 <LCD_displayCharacter+0x2a4>
    292a:	fe 01       	movw	r30, r28
    292c:	e7 5b       	subi	r30, 0xB7	; 183
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	88 ec       	ldi	r24, 0xC8	; 200
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	91 83       	std	Z+1, r25	; 0x01
    2936:	80 83       	st	Z, r24
    2938:	fe 01       	movw	r30, r28
    293a:	e7 5b       	subi	r30, 0xB7	; 183
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	80 81       	ld	r24, Z
    2940:	91 81       	ldd	r25, Z+1	; 0x01
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	f1 f7       	brne	.-4      	; 0x2942 <LCD_displayCharacter+0x27e>
    2946:	fe 01       	movw	r30, r28
    2948:	e7 5b       	subi	r30, 0xB7	; 183
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	91 83       	std	Z+1, r25	; 0x01
    294e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2950:	de 01       	movw	r26, r28
    2952:	a5 5b       	subi	r26, 0xB5	; 181
    2954:	bf 4f       	sbci	r27, 0xFF	; 255
    2956:	fe 01       	movw	r30, r28
    2958:	e5 5b       	subi	r30, 0xB5	; 181
    295a:	ff 4f       	sbci	r31, 0xFF	; 255
    295c:	80 81       	ld	r24, Z
    295e:	91 81       	ldd	r25, Z+1	; 0x01
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	11 96       	adiw	r26, 0x01	; 1
    2964:	9c 93       	st	X, r25
    2966:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2968:	fe 01       	movw	r30, r28
    296a:	e5 5b       	subi	r30, 0xB5	; 181
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	80 81       	ld	r24, Z
    2970:	91 81       	ldd	r25, Z+1	; 0x01
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	d1 f6       	brne	.-76     	; 0x292a <LCD_displayCharacter+0x266>
    2976:	27 c0       	rjmp	.+78     	; 0x29c6 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2978:	8e 01       	movw	r16, r28
    297a:	05 5b       	subi	r16, 0xB5	; 181
    297c:	1f 4f       	sbci	r17, 0xFF	; 255
    297e:	fe 01       	movw	r30, r28
    2980:	e3 5b       	subi	r30, 0xB3	; 179
    2982:	ff 4f       	sbci	r31, 0xFF	; 255
    2984:	60 81       	ld	r22, Z
    2986:	71 81       	ldd	r23, Z+1	; 0x01
    2988:	82 81       	ldd	r24, Z+2	; 0x02
    298a:	93 81       	ldd	r25, Z+3	; 0x03
    298c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	f8 01       	movw	r30, r16
    2996:	91 83       	std	Z+1, r25	; 0x01
    2998:	80 83       	st	Z, r24
    299a:	de 01       	movw	r26, r28
    299c:	a9 5b       	subi	r26, 0xB9	; 185
    299e:	bf 4f       	sbci	r27, 0xFF	; 255
    29a0:	fe 01       	movw	r30, r28
    29a2:	e5 5b       	subi	r30, 0xB5	; 181
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	80 81       	ld	r24, Z
    29a8:	91 81       	ldd	r25, Z+1	; 0x01
    29aa:	8d 93       	st	X+, r24
    29ac:	9c 93       	st	X, r25
    29ae:	fe 01       	movw	r30, r28
    29b0:	e9 5b       	subi	r30, 0xB9	; 185
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	80 81       	ld	r24, Z
    29b6:	91 81       	ldd	r25, Z+1	; 0x01
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	f1 f7       	brne	.-4      	; 0x29b8 <LCD_displayCharacter+0x2f4>
    29bc:	fe 01       	movw	r30, r28
    29be:	e9 5b       	subi	r30, 0xB9	; 185
    29c0:	ff 4f       	sbci	r31, 0xFF	; 255
    29c2:	91 83       	std	Z+1, r25	; 0x01
    29c4:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    29c6:	fe 01       	movw	r30, r28
    29c8:	ed 59       	subi	r30, 0x9D	; 157
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	80 81       	ld	r24, Z
    29ce:	88 2f       	mov	r24, r24
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	80 71       	andi	r24, 0x10	; 16
    29d4:	90 70       	andi	r25, 0x00	; 0
    29d6:	95 95       	asr	r25
    29d8:	87 95       	ror	r24
    29da:	95 95       	asr	r25
    29dc:	87 95       	ror	r24
    29de:	95 95       	asr	r25
    29e0:	87 95       	ror	r24
    29e2:	95 95       	asr	r25
    29e4:	87 95       	ror	r24
    29e6:	98 2f       	mov	r25, r24
    29e8:	82 e0       	ldi	r24, 0x02	; 2
    29ea:	64 e0       	ldi	r22, 0x04	; 4
    29ec:	49 2f       	mov	r20, r25
    29ee:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    29f2:	fe 01       	movw	r30, r28
    29f4:	ed 59       	subi	r30, 0x9D	; 157
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	80 81       	ld	r24, Z
    29fa:	88 2f       	mov	r24, r24
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	80 72       	andi	r24, 0x20	; 32
    2a00:	90 70       	andi	r25, 0x00	; 0
    2a02:	95 95       	asr	r25
    2a04:	87 95       	ror	r24
    2a06:	95 95       	asr	r25
    2a08:	87 95       	ror	r24
    2a0a:	95 95       	asr	r25
    2a0c:	87 95       	ror	r24
    2a0e:	95 95       	asr	r25
    2a10:	87 95       	ror	r24
    2a12:	95 95       	asr	r25
    2a14:	87 95       	ror	r24
    2a16:	98 2f       	mov	r25, r24
    2a18:	82 e0       	ldi	r24, 0x02	; 2
    2a1a:	65 e0       	ldi	r22, 0x05	; 5
    2a1c:	49 2f       	mov	r20, r25
    2a1e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2a22:	fe 01       	movw	r30, r28
    2a24:	ed 59       	subi	r30, 0x9D	; 157
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	80 81       	ld	r24, Z
    2a2a:	88 2f       	mov	r24, r24
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	80 74       	andi	r24, 0x40	; 64
    2a30:	90 70       	andi	r25, 0x00	; 0
    2a32:	08 2e       	mov	r0, r24
    2a34:	89 2f       	mov	r24, r25
    2a36:	00 0c       	add	r0, r0
    2a38:	88 1f       	adc	r24, r24
    2a3a:	99 0b       	sbc	r25, r25
    2a3c:	00 0c       	add	r0, r0
    2a3e:	88 1f       	adc	r24, r24
    2a40:	99 1f       	adc	r25, r25
    2a42:	98 2f       	mov	r25, r24
    2a44:	82 e0       	ldi	r24, 0x02	; 2
    2a46:	66 e0       	ldi	r22, 0x06	; 6
    2a48:	49 2f       	mov	r20, r25
    2a4a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2a4e:	fe 01       	movw	r30, r28
    2a50:	ed 59       	subi	r30, 0x9D	; 157
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	80 81       	ld	r24, Z
    2a56:	98 2f       	mov	r25, r24
    2a58:	99 1f       	adc	r25, r25
    2a5a:	99 27       	eor	r25, r25
    2a5c:	99 1f       	adc	r25, r25
    2a5e:	82 e0       	ldi	r24, 0x02	; 2
    2a60:	67 e0       	ldi	r22, 0x07	; 7
    2a62:	49 2f       	mov	r20, r25
    2a64:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
    2a68:	fe 01       	movw	r30, r28
    2a6a:	ed 5b       	subi	r30, 0xBD	; 189
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	a0 e8       	ldi	r26, 0x80	; 128
    2a74:	bf e3       	ldi	r27, 0x3F	; 63
    2a76:	80 83       	st	Z, r24
    2a78:	91 83       	std	Z+1, r25	; 0x01
    2a7a:	a2 83       	std	Z+2, r26	; 0x02
    2a7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7e:	8e 01       	movw	r16, r28
    2a80:	01 5c       	subi	r16, 0xC1	; 193
    2a82:	1f 4f       	sbci	r17, 0xFF	; 255
    2a84:	fe 01       	movw	r30, r28
    2a86:	ed 5b       	subi	r30, 0xBD	; 189
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	60 81       	ld	r22, Z
    2a8c:	71 81       	ldd	r23, Z+1	; 0x01
    2a8e:	82 81       	ldd	r24, Z+2	; 0x02
    2a90:	93 81       	ldd	r25, Z+3	; 0x03
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	4a ef       	ldi	r20, 0xFA	; 250
    2a98:	54 e4       	ldi	r21, 0x44	; 68
    2a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	f8 01       	movw	r30, r16
    2aa4:	80 83       	st	Z, r24
    2aa6:	91 83       	std	Z+1, r25	; 0x01
    2aa8:	a2 83       	std	Z+2, r26	; 0x02
    2aaa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aac:	fe 01       	movw	r30, r28
    2aae:	ff 96       	adiw	r30, 0x3f	; 63
    2ab0:	60 81       	ld	r22, Z
    2ab2:	71 81       	ldd	r23, Z+1	; 0x01
    2ab4:	82 81       	ldd	r24, Z+2	; 0x02
    2ab6:	93 81       	ldd	r25, Z+3	; 0x03
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	40 e8       	ldi	r20, 0x80	; 128
    2abe:	5f e3       	ldi	r21, 0x3F	; 63
    2ac0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ac4:	88 23       	and	r24, r24
    2ac6:	2c f4       	brge	.+10     	; 0x2ad2 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	9e af       	std	Y+62, r25	; 0x3e
    2ace:	8d af       	std	Y+61, r24	; 0x3d
    2ad0:	46 c0       	rjmp	.+140    	; 0x2b5e <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	ff 96       	adiw	r30, 0x3f	; 63
    2ad6:	60 81       	ld	r22, Z
    2ad8:	71 81       	ldd	r23, Z+1	; 0x01
    2ada:	82 81       	ldd	r24, Z+2	; 0x02
    2adc:	93 81       	ldd	r25, Z+3	; 0x03
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	3f ef       	ldi	r19, 0xFF	; 255
    2ae2:	4f e7       	ldi	r20, 0x7F	; 127
    2ae4:	57 e4       	ldi	r21, 0x47	; 71
    2ae6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aea:	18 16       	cp	r1, r24
    2aec:	64 f5       	brge	.+88     	; 0x2b46 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aee:	fe 01       	movw	r30, r28
    2af0:	ed 5b       	subi	r30, 0xBD	; 189
    2af2:	ff 4f       	sbci	r31, 0xFF	; 255
    2af4:	60 81       	ld	r22, Z
    2af6:	71 81       	ldd	r23, Z+1	; 0x01
    2af8:	82 81       	ldd	r24, Z+2	; 0x02
    2afa:	93 81       	ldd	r25, Z+3	; 0x03
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e2       	ldi	r20, 0x20	; 32
    2b02:	51 e4       	ldi	r21, 0x41	; 65
    2b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	bc 01       	movw	r22, r24
    2b0e:	cd 01       	movw	r24, r26
    2b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	9e af       	std	Y+62, r25	; 0x3e
    2b1a:	8d af       	std	Y+61, r24	; 0x3d
    2b1c:	0f c0       	rjmp	.+30     	; 0x2b3c <LCD_displayCharacter+0x478>
    2b1e:	88 ec       	ldi	r24, 0xC8	; 200
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	9c af       	std	Y+60, r25	; 0x3c
    2b24:	8b af       	std	Y+59, r24	; 0x3b
    2b26:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b28:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	f1 f7       	brne	.-4      	; 0x2b2a <LCD_displayCharacter+0x466>
    2b2e:	9c af       	std	Y+60, r25	; 0x3c
    2b30:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b32:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b34:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	9e af       	std	Y+62, r25	; 0x3e
    2b3a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b40:	00 97       	sbiw	r24, 0x00	; 0
    2b42:	69 f7       	brne	.-38     	; 0x2b1e <LCD_displayCharacter+0x45a>
    2b44:	16 c0       	rjmp	.+44     	; 0x2b72 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b46:	fe 01       	movw	r30, r28
    2b48:	ff 96       	adiw	r30, 0x3f	; 63
    2b4a:	60 81       	ld	r22, Z
    2b4c:	71 81       	ldd	r23, Z+1	; 0x01
    2b4e:	82 81       	ldd	r24, Z+2	; 0x02
    2b50:	93 81       	ldd	r25, Z+3	; 0x03
    2b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	9e af       	std	Y+62, r25	; 0x3e
    2b5c:	8d af       	std	Y+61, r24	; 0x3d
    2b5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b60:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b62:	9a af       	std	Y+58, r25	; 0x3a
    2b64:	89 af       	std	Y+57, r24	; 0x39
    2b66:	89 ad       	ldd	r24, Y+57	; 0x39
    2b68:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	f1 f7       	brne	.-4      	; 0x2b6a <LCD_displayCharacter+0x4a6>
    2b6e:	9a af       	std	Y+58, r25	; 0x3a
    2b70:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2b72:	82 e0       	ldi	r24, 0x02	; 2
    2b74:	61 e0       	ldi	r22, 0x01	; 1
    2b76:	40 e0       	ldi	r20, 0x00	; 0
    2b78:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	a0 e8       	ldi	r26, 0x80	; 128
    2b82:	bf e3       	ldi	r27, 0x3F	; 63
    2b84:	8d ab       	std	Y+53, r24	; 0x35
    2b86:	9e ab       	std	Y+54, r25	; 0x36
    2b88:	af ab       	std	Y+55, r26	; 0x37
    2b8a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8c:	6d a9       	ldd	r22, Y+53	; 0x35
    2b8e:	7e a9       	ldd	r23, Y+54	; 0x36
    2b90:	8f a9       	ldd	r24, Y+55	; 0x37
    2b92:	98 ad       	ldd	r25, Y+56	; 0x38
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	4a ef       	ldi	r20, 0xFA	; 250
    2b9a:	54 e4       	ldi	r21, 0x44	; 68
    2b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	89 ab       	std	Y+49, r24	; 0x31
    2ba6:	9a ab       	std	Y+50, r25	; 0x32
    2ba8:	ab ab       	std	Y+51, r26	; 0x33
    2baa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bac:	69 a9       	ldd	r22, Y+49	; 0x31
    2bae:	7a a9       	ldd	r23, Y+50	; 0x32
    2bb0:	8b a9       	ldd	r24, Y+51	; 0x33
    2bb2:	9c a9       	ldd	r25, Y+52	; 0x34
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e8       	ldi	r20, 0x80	; 128
    2bba:	5f e3       	ldi	r21, 0x3F	; 63
    2bbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bc0:	88 23       	and	r24, r24
    2bc2:	2c f4       	brge	.+10     	; 0x2bce <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	98 ab       	std	Y+48, r25	; 0x30
    2bca:	8f a7       	std	Y+47, r24	; 0x2f
    2bcc:	3f c0       	rjmp	.+126    	; 0x2c4c <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2bce:	69 a9       	ldd	r22, Y+49	; 0x31
    2bd0:	7a a9       	ldd	r23, Y+50	; 0x32
    2bd2:	8b a9       	ldd	r24, Y+51	; 0x33
    2bd4:	9c a9       	ldd	r25, Y+52	; 0x34
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	3f ef       	ldi	r19, 0xFF	; 255
    2bda:	4f e7       	ldi	r20, 0x7F	; 127
    2bdc:	57 e4       	ldi	r21, 0x47	; 71
    2bde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2be2:	18 16       	cp	r1, r24
    2be4:	4c f5       	brge	.+82     	; 0x2c38 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be6:	6d a9       	ldd	r22, Y+53	; 0x35
    2be8:	7e a9       	ldd	r23, Y+54	; 0x36
    2bea:	8f a9       	ldd	r24, Y+55	; 0x37
    2bec:	98 ad       	ldd	r25, Y+56	; 0x38
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e2       	ldi	r20, 0x20	; 32
    2bf4:	51 e4       	ldi	r21, 0x41	; 65
    2bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	bc 01       	movw	r22, r24
    2c00:	cd 01       	movw	r24, r26
    2c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	98 ab       	std	Y+48, r25	; 0x30
    2c0c:	8f a7       	std	Y+47, r24	; 0x2f
    2c0e:	0f c0       	rjmp	.+30     	; 0x2c2e <LCD_displayCharacter+0x56a>
    2c10:	88 ec       	ldi	r24, 0xC8	; 200
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	9e a7       	std	Y+46, r25	; 0x2e
    2c16:	8d a7       	std	Y+45, r24	; 0x2d
    2c18:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	f1 f7       	brne	.-4      	; 0x2c1c <LCD_displayCharacter+0x558>
    2c20:	9e a7       	std	Y+46, r25	; 0x2e
    2c22:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c24:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c26:	98 a9       	ldd	r25, Y+48	; 0x30
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	98 ab       	std	Y+48, r25	; 0x30
    2c2c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c30:	98 a9       	ldd	r25, Y+48	; 0x30
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	69 f7       	brne	.-38     	; 0x2c10 <LCD_displayCharacter+0x54c>
    2c36:	14 c0       	rjmp	.+40     	; 0x2c60 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c38:	69 a9       	ldd	r22, Y+49	; 0x31
    2c3a:	7a a9       	ldd	r23, Y+50	; 0x32
    2c3c:	8b a9       	ldd	r24, Y+51	; 0x33
    2c3e:	9c a9       	ldd	r25, Y+52	; 0x34
    2c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	98 ab       	std	Y+48, r25	; 0x30
    2c4a:	8f a7       	std	Y+47, r24	; 0x2f
    2c4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c4e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c50:	9c a7       	std	Y+44, r25	; 0x2c
    2c52:	8b a7       	std	Y+43, r24	; 0x2b
    2c54:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c56:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	f1 f7       	brne	.-4      	; 0x2c58 <LCD_displayCharacter+0x594>
    2c5c:	9c a7       	std	Y+44, r25	; 0x2c
    2c5e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2c60:	82 e0       	ldi	r24, 0x02	; 2
    2c62:	61 e0       	ldi	r22, 0x01	; 1
    2c64:	41 e0       	ldi	r20, 0x01	; 1
    2c66:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	a0 e8       	ldi	r26, 0x80	; 128
    2c70:	bf e3       	ldi	r27, 0x3F	; 63
    2c72:	8f a3       	std	Y+39, r24	; 0x27
    2c74:	98 a7       	std	Y+40, r25	; 0x28
    2c76:	a9 a7       	std	Y+41, r26	; 0x29
    2c78:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c7a:	6f a1       	ldd	r22, Y+39	; 0x27
    2c7c:	78 a5       	ldd	r23, Y+40	; 0x28
    2c7e:	89 a5       	ldd	r24, Y+41	; 0x29
    2c80:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	4a ef       	ldi	r20, 0xFA	; 250
    2c88:	54 e4       	ldi	r21, 0x44	; 68
    2c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	8b a3       	std	Y+35, r24	; 0x23
    2c94:	9c a3       	std	Y+36, r25	; 0x24
    2c96:	ad a3       	std	Y+37, r26	; 0x25
    2c98:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c9a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c9c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c9e:	8d a1       	ldd	r24, Y+37	; 0x25
    2ca0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	40 e8       	ldi	r20, 0x80	; 128
    2ca8:	5f e3       	ldi	r21, 0x3F	; 63
    2caa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cae:	88 23       	and	r24, r24
    2cb0:	2c f4       	brge	.+10     	; 0x2cbc <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	9a a3       	std	Y+34, r25	; 0x22
    2cb8:	89 a3       	std	Y+33, r24	; 0x21
    2cba:	3f c0       	rjmp	.+126    	; 0x2d3a <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2cbc:	6b a1       	ldd	r22, Y+35	; 0x23
    2cbe:	7c a1       	ldd	r23, Y+36	; 0x24
    2cc0:	8d a1       	ldd	r24, Y+37	; 0x25
    2cc2:	9e a1       	ldd	r25, Y+38	; 0x26
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	3f ef       	ldi	r19, 0xFF	; 255
    2cc8:	4f e7       	ldi	r20, 0x7F	; 127
    2cca:	57 e4       	ldi	r21, 0x47	; 71
    2ccc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cd0:	18 16       	cp	r1, r24
    2cd2:	4c f5       	brge	.+82     	; 0x2d26 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd4:	6f a1       	ldd	r22, Y+39	; 0x27
    2cd6:	78 a5       	ldd	r23, Y+40	; 0x28
    2cd8:	89 a5       	ldd	r24, Y+41	; 0x29
    2cda:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	40 e2       	ldi	r20, 0x20	; 32
    2ce2:	51 e4       	ldi	r21, 0x41	; 65
    2ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	bc 01       	movw	r22, r24
    2cee:	cd 01       	movw	r24, r26
    2cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	9a a3       	std	Y+34, r25	; 0x22
    2cfa:	89 a3       	std	Y+33, r24	; 0x21
    2cfc:	0f c0       	rjmp	.+30     	; 0x2d1c <LCD_displayCharacter+0x658>
    2cfe:	88 ec       	ldi	r24, 0xC8	; 200
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	98 a3       	std	Y+32, r25	; 0x20
    2d04:	8f 8f       	std	Y+31, r24	; 0x1f
    2d06:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d08:	98 a1       	ldd	r25, Y+32	; 0x20
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	f1 f7       	brne	.-4      	; 0x2d0a <LCD_displayCharacter+0x646>
    2d0e:	98 a3       	std	Y+32, r25	; 0x20
    2d10:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d12:	89 a1       	ldd	r24, Y+33	; 0x21
    2d14:	9a a1       	ldd	r25, Y+34	; 0x22
    2d16:	01 97       	sbiw	r24, 0x01	; 1
    2d18:	9a a3       	std	Y+34, r25	; 0x22
    2d1a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d1c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d1e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d20:	00 97       	sbiw	r24, 0x00	; 0
    2d22:	69 f7       	brne	.-38     	; 0x2cfe <LCD_displayCharacter+0x63a>
    2d24:	14 c0       	rjmp	.+40     	; 0x2d4e <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d26:	6b a1       	ldd	r22, Y+35	; 0x23
    2d28:	7c a1       	ldd	r23, Y+36	; 0x24
    2d2a:	8d a1       	ldd	r24, Y+37	; 0x25
    2d2c:	9e a1       	ldd	r25, Y+38	; 0x26
    2d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	9a a3       	std	Y+34, r25	; 0x22
    2d38:	89 a3       	std	Y+33, r24	; 0x21
    2d3a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d3c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d3e:	9e 8f       	std	Y+30, r25	; 0x1e
    2d40:	8d 8f       	std	Y+29, r24	; 0x1d
    2d42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d46:	01 97       	sbiw	r24, 0x01	; 1
    2d48:	f1 f7       	brne	.-4      	; 0x2d46 <LCD_displayCharacter+0x682>
    2d4a:	9e 8f       	std	Y+30, r25	; 0x1e
    2d4c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2d4e:	fe 01       	movw	r30, r28
    2d50:	ed 59       	subi	r30, 0x9D	; 157
    2d52:	ff 4f       	sbci	r31, 0xFF	; 255
    2d54:	80 81       	ld	r24, Z
    2d56:	98 2f       	mov	r25, r24
    2d58:	91 70       	andi	r25, 0x01	; 1
    2d5a:	82 e0       	ldi	r24, 0x02	; 2
    2d5c:	64 e0       	ldi	r22, 0x04	; 4
    2d5e:	49 2f       	mov	r20, r25
    2d60:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2d64:	fe 01       	movw	r30, r28
    2d66:	ed 59       	subi	r30, 0x9D	; 157
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	80 81       	ld	r24, Z
    2d6c:	88 2f       	mov	r24, r24
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	82 70       	andi	r24, 0x02	; 2
    2d72:	90 70       	andi	r25, 0x00	; 0
    2d74:	95 95       	asr	r25
    2d76:	87 95       	ror	r24
    2d78:	98 2f       	mov	r25, r24
    2d7a:	82 e0       	ldi	r24, 0x02	; 2
    2d7c:	65 e0       	ldi	r22, 0x05	; 5
    2d7e:	49 2f       	mov	r20, r25
    2d80:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2d84:	fe 01       	movw	r30, r28
    2d86:	ed 59       	subi	r30, 0x9D	; 157
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	80 81       	ld	r24, Z
    2d8c:	88 2f       	mov	r24, r24
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	84 70       	andi	r24, 0x04	; 4
    2d92:	90 70       	andi	r25, 0x00	; 0
    2d94:	95 95       	asr	r25
    2d96:	87 95       	ror	r24
    2d98:	95 95       	asr	r25
    2d9a:	87 95       	ror	r24
    2d9c:	98 2f       	mov	r25, r24
    2d9e:	82 e0       	ldi	r24, 0x02	; 2
    2da0:	66 e0       	ldi	r22, 0x06	; 6
    2da2:	49 2f       	mov	r20, r25
    2da4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2da8:	fe 01       	movw	r30, r28
    2daa:	ed 59       	subi	r30, 0x9D	; 157
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	80 81       	ld	r24, Z
    2db0:	88 2f       	mov	r24, r24
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	88 70       	andi	r24, 0x08	; 8
    2db6:	90 70       	andi	r25, 0x00	; 0
    2db8:	95 95       	asr	r25
    2dba:	87 95       	ror	r24
    2dbc:	95 95       	asr	r25
    2dbe:	87 95       	ror	r24
    2dc0:	95 95       	asr	r25
    2dc2:	87 95       	ror	r24
    2dc4:	98 2f       	mov	r25, r24
    2dc6:	82 e0       	ldi	r24, 0x02	; 2
    2dc8:	67 e0       	ldi	r22, 0x07	; 7
    2dca:	49 2f       	mov	r20, r25
    2dcc:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	a0 e8       	ldi	r26, 0x80	; 128
    2dd6:	bf e3       	ldi	r27, 0x3F	; 63
    2dd8:	89 8f       	std	Y+25, r24	; 0x19
    2dda:	9a 8f       	std	Y+26, r25	; 0x1a
    2ddc:	ab 8f       	std	Y+27, r26	; 0x1b
    2dde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de0:	69 8d       	ldd	r22, Y+25	; 0x19
    2de2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2de4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2de6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	4a ef       	ldi	r20, 0xFA	; 250
    2dee:	54 e4       	ldi	r21, 0x44	; 68
    2df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	8d 8b       	std	Y+21, r24	; 0x15
    2dfa:	9e 8b       	std	Y+22, r25	; 0x16
    2dfc:	af 8b       	std	Y+23, r26	; 0x17
    2dfe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e00:	6d 89       	ldd	r22, Y+21	; 0x15
    2e02:	7e 89       	ldd	r23, Y+22	; 0x16
    2e04:	8f 89       	ldd	r24, Y+23	; 0x17
    2e06:	98 8d       	ldd	r25, Y+24	; 0x18
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e8       	ldi	r20, 0x80	; 128
    2e0e:	5f e3       	ldi	r21, 0x3F	; 63
    2e10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e14:	88 23       	and	r24, r24
    2e16:	2c f4       	brge	.+10     	; 0x2e22 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	9c 8b       	std	Y+20, r25	; 0x14
    2e1e:	8b 8b       	std	Y+19, r24	; 0x13
    2e20:	3f c0       	rjmp	.+126    	; 0x2ea0 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2e22:	6d 89       	ldd	r22, Y+21	; 0x15
    2e24:	7e 89       	ldd	r23, Y+22	; 0x16
    2e26:	8f 89       	ldd	r24, Y+23	; 0x17
    2e28:	98 8d       	ldd	r25, Y+24	; 0x18
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	3f ef       	ldi	r19, 0xFF	; 255
    2e2e:	4f e7       	ldi	r20, 0x7F	; 127
    2e30:	57 e4       	ldi	r21, 0x47	; 71
    2e32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e36:	18 16       	cp	r1, r24
    2e38:	4c f5       	brge	.+82     	; 0x2e8c <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e3a:	69 8d       	ldd	r22, Y+25	; 0x19
    2e3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	40 e2       	ldi	r20, 0x20	; 32
    2e48:	51 e4       	ldi	r21, 0x41	; 65
    2e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	bc 01       	movw	r22, r24
    2e54:	cd 01       	movw	r24, r26
    2e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	9c 8b       	std	Y+20, r25	; 0x14
    2e60:	8b 8b       	std	Y+19, r24	; 0x13
    2e62:	0f c0       	rjmp	.+30     	; 0x2e82 <LCD_displayCharacter+0x7be>
    2e64:	88 ec       	ldi	r24, 0xC8	; 200
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	9a 8b       	std	Y+18, r25	; 0x12
    2e6a:	89 8b       	std	Y+17, r24	; 0x11
    2e6c:	89 89       	ldd	r24, Y+17	; 0x11
    2e6e:	9a 89       	ldd	r25, Y+18	; 0x12
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	f1 f7       	brne	.-4      	; 0x2e70 <LCD_displayCharacter+0x7ac>
    2e74:	9a 8b       	std	Y+18, r25	; 0x12
    2e76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e78:	8b 89       	ldd	r24, Y+19	; 0x13
    2e7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	9c 8b       	std	Y+20, r25	; 0x14
    2e80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e82:	8b 89       	ldd	r24, Y+19	; 0x13
    2e84:	9c 89       	ldd	r25, Y+20	; 0x14
    2e86:	00 97       	sbiw	r24, 0x00	; 0
    2e88:	69 f7       	brne	.-38     	; 0x2e64 <LCD_displayCharacter+0x7a0>
    2e8a:	14 c0       	rjmp	.+40     	; 0x2eb4 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e90:	8f 89       	ldd	r24, Y+23	; 0x17
    2e92:	98 8d       	ldd	r25, Y+24	; 0x18
    2e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	9c 8b       	std	Y+20, r25	; 0x14
    2e9e:	8b 8b       	std	Y+19, r24	; 0x13
    2ea0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ea4:	98 8b       	std	Y+16, r25	; 0x10
    2ea6:	8f 87       	std	Y+15, r24	; 0x0f
    2ea8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eaa:	98 89       	ldd	r25, Y+16	; 0x10
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <LCD_displayCharacter+0x7e8>
    2eb0:	98 8b       	std	Y+16, r25	; 0x10
    2eb2:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2eb4:	82 e0       	ldi	r24, 0x02	; 2
    2eb6:	61 e0       	ldi	r22, 0x01	; 1
    2eb8:	40 e0       	ldi	r20, 0x00	; 0
    2eba:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GPIO_writePin>
    2ebe:	80 e0       	ldi	r24, 0x00	; 0
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	a0 e8       	ldi	r26, 0x80	; 128
    2ec4:	bf e3       	ldi	r27, 0x3F	; 63
    2ec6:	8b 87       	std	Y+11, r24	; 0x0b
    2ec8:	9c 87       	std	Y+12, r25	; 0x0c
    2eca:	ad 87       	std	Y+13, r26	; 0x0d
    2ecc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ece:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	4a ef       	ldi	r20, 0xFA	; 250
    2edc:	54 e4       	ldi	r21, 0x44	; 68
    2ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	8f 83       	std	Y+7, r24	; 0x07
    2ee8:	98 87       	std	Y+8, r25	; 0x08
    2eea:	a9 87       	std	Y+9, r26	; 0x09
    2eec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eee:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef0:	78 85       	ldd	r23, Y+8	; 0x08
    2ef2:	89 85       	ldd	r24, Y+9	; 0x09
    2ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	40 e8       	ldi	r20, 0x80	; 128
    2efc:	5f e3       	ldi	r21, 0x3F	; 63
    2efe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f02:	88 23       	and	r24, r24
    2f04:	2c f4       	brge	.+10     	; 0x2f10 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	9e 83       	std	Y+6, r25	; 0x06
    2f0c:	8d 83       	std	Y+5, r24	; 0x05
    2f0e:	3f c0       	rjmp	.+126    	; 0x2f8e <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2f10:	6f 81       	ldd	r22, Y+7	; 0x07
    2f12:	78 85       	ldd	r23, Y+8	; 0x08
    2f14:	89 85       	ldd	r24, Y+9	; 0x09
    2f16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f18:	20 e0       	ldi	r18, 0x00	; 0
    2f1a:	3f ef       	ldi	r19, 0xFF	; 255
    2f1c:	4f e7       	ldi	r20, 0x7F	; 127
    2f1e:	57 e4       	ldi	r21, 0x47	; 71
    2f20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f24:	18 16       	cp	r1, r24
    2f26:	4c f5       	brge	.+82     	; 0x2f7a <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	40 e2       	ldi	r20, 0x20	; 32
    2f36:	51 e4       	ldi	r21, 0x41	; 65
    2f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	bc 01       	movw	r22, r24
    2f42:	cd 01       	movw	r24, r26
    2f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	9e 83       	std	Y+6, r25	; 0x06
    2f4e:	8d 83       	std	Y+5, r24	; 0x05
    2f50:	0f c0       	rjmp	.+30     	; 0x2f70 <LCD_displayCharacter+0x8ac>
    2f52:	88 ec       	ldi	r24, 0xC8	; 200
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	9c 83       	std	Y+4, r25	; 0x04
    2f58:	8b 83       	std	Y+3, r24	; 0x03
    2f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5e:	01 97       	sbiw	r24, 0x01	; 1
    2f60:	f1 f7       	brne	.-4      	; 0x2f5e <LCD_displayCharacter+0x89a>
    2f62:	9c 83       	std	Y+4, r25	; 0x04
    2f64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f66:	8d 81       	ldd	r24, Y+5	; 0x05
    2f68:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6a:	01 97       	sbiw	r24, 0x01	; 1
    2f6c:	9e 83       	std	Y+6, r25	; 0x06
    2f6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f70:	8d 81       	ldd	r24, Y+5	; 0x05
    2f72:	9e 81       	ldd	r25, Y+6	; 0x06
    2f74:	00 97       	sbiw	r24, 0x00	; 0
    2f76:	69 f7       	brne	.-38     	; 0x2f52 <LCD_displayCharacter+0x88e>
    2f78:	14 c0       	rjmp	.+40     	; 0x2fa2 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f7c:	78 85       	ldd	r23, Y+8	; 0x08
    2f7e:	89 85       	ldd	r24, Y+9	; 0x09
    2f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	9e 83       	std	Y+6, r25	; 0x06
    2f8c:	8d 83       	std	Y+5, r24	; 0x05
    2f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f90:	9e 81       	ldd	r25, Y+6	; 0x06
    2f92:	9a 83       	std	Y+2, r25	; 0x02
    2f94:	89 83       	std	Y+1, r24	; 0x01
    2f96:	89 81       	ldd	r24, Y+1	; 0x01
    2f98:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9a:	01 97       	sbiw	r24, 0x01	; 1
    2f9c:	f1 f7       	brne	.-4      	; 0x2f9a <LCD_displayCharacter+0x8d6>
    2f9e:	9a 83       	std	Y+2, r25	; 0x02
    2fa0:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2fa2:	cd 59       	subi	r28, 0x9D	; 157
    2fa4:	df 4f       	sbci	r29, 0xFF	; 255
    2fa6:	0f b6       	in	r0, 0x3f	; 63
    2fa8:	f8 94       	cli
    2faa:	de bf       	out	0x3e, r29	; 62
    2fac:	0f be       	out	0x3f, r0	; 63
    2fae:	cd bf       	out	0x3d, r28	; 61
    2fb0:	cf 91       	pop	r28
    2fb2:	df 91       	pop	r29
    2fb4:	1f 91       	pop	r17
    2fb6:	0f 91       	pop	r16
    2fb8:	08 95       	ret

00002fba <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2fba:	df 93       	push	r29
    2fbc:	cf 93       	push	r28
    2fbe:	00 d0       	rcall	.+0      	; 0x2fc0 <LCD_displayString+0x6>
    2fc0:	0f 92       	push	r0
    2fc2:	cd b7       	in	r28, 0x3d	; 61
    2fc4:	de b7       	in	r29, 0x3e	; 62
    2fc6:	9b 83       	std	Y+3, r25	; 0x03
    2fc8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2fca:	19 82       	std	Y+1, r1	; 0x01
    2fcc:	0e c0       	rjmp	.+28     	; 0x2fea <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2fce:	89 81       	ldd	r24, Y+1	; 0x01
    2fd0:	28 2f       	mov	r18, r24
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd8:	fc 01       	movw	r30, r24
    2fda:	e2 0f       	add	r30, r18
    2fdc:	f3 1f       	adc	r31, r19
    2fde:	80 81       	ld	r24, Z
    2fe0:	0e 94 62 13 	call	0x26c4	; 0x26c4 <LCD_displayCharacter>
		i++;
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	8f 5f       	subi	r24, 0xFF	; 255
    2fe8:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
    2fec:	28 2f       	mov	r18, r24
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff4:	fc 01       	movw	r30, r24
    2ff6:	e2 0f       	add	r30, r18
    2ff8:	f3 1f       	adc	r31, r19
    2ffa:	80 81       	ld	r24, Z
    2ffc:	88 23       	and	r24, r24
    2ffe:	39 f7       	brne	.-50     	; 0x2fce <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	cf 91       	pop	r28
    3008:	df 91       	pop	r29
    300a:	08 95       	ret

0000300c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	00 d0       	rcall	.+0      	; 0x3012 <LCD_moveCursor+0x6>
    3012:	00 d0       	rcall	.+0      	; 0x3014 <LCD_moveCursor+0x8>
    3014:	0f 92       	push	r0
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
    301a:	8a 83       	std	Y+2, r24	; 0x02
    301c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    301e:	8a 81       	ldd	r24, Y+2	; 0x02
    3020:	28 2f       	mov	r18, r24
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	3d 83       	std	Y+5, r19	; 0x05
    3026:	2c 83       	std	Y+4, r18	; 0x04
    3028:	8c 81       	ldd	r24, Y+4	; 0x04
    302a:	9d 81       	ldd	r25, Y+5	; 0x05
    302c:	81 30       	cpi	r24, 0x01	; 1
    302e:	91 05       	cpc	r25, r1
    3030:	c1 f0       	breq	.+48     	; 0x3062 <LCD_moveCursor+0x56>
    3032:	2c 81       	ldd	r18, Y+4	; 0x04
    3034:	3d 81       	ldd	r19, Y+5	; 0x05
    3036:	22 30       	cpi	r18, 0x02	; 2
    3038:	31 05       	cpc	r19, r1
    303a:	2c f4       	brge	.+10     	; 0x3046 <LCD_moveCursor+0x3a>
    303c:	8c 81       	ldd	r24, Y+4	; 0x04
    303e:	9d 81       	ldd	r25, Y+5	; 0x05
    3040:	00 97       	sbiw	r24, 0x00	; 0
    3042:	61 f0       	breq	.+24     	; 0x305c <LCD_moveCursor+0x50>
    3044:	19 c0       	rjmp	.+50     	; 0x3078 <LCD_moveCursor+0x6c>
    3046:	2c 81       	ldd	r18, Y+4	; 0x04
    3048:	3d 81       	ldd	r19, Y+5	; 0x05
    304a:	22 30       	cpi	r18, 0x02	; 2
    304c:	31 05       	cpc	r19, r1
    304e:	69 f0       	breq	.+26     	; 0x306a <LCD_moveCursor+0x5e>
    3050:	8c 81       	ldd	r24, Y+4	; 0x04
    3052:	9d 81       	ldd	r25, Y+5	; 0x05
    3054:	83 30       	cpi	r24, 0x03	; 3
    3056:	91 05       	cpc	r25, r1
    3058:	61 f0       	breq	.+24     	; 0x3072 <LCD_moveCursor+0x66>
    305a:	0e c0       	rjmp	.+28     	; 0x3078 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    305c:	8b 81       	ldd	r24, Y+3	; 0x03
    305e:	89 83       	std	Y+1, r24	; 0x01
    3060:	0b c0       	rjmp	.+22     	; 0x3078 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3062:	8b 81       	ldd	r24, Y+3	; 0x03
    3064:	80 5c       	subi	r24, 0xC0	; 192
    3066:	89 83       	std	Y+1, r24	; 0x01
    3068:	07 c0       	rjmp	.+14     	; 0x3078 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    306a:	8b 81       	ldd	r24, Y+3	; 0x03
    306c:	80 5f       	subi	r24, 0xF0	; 240
    306e:	89 83       	std	Y+1, r24	; 0x01
    3070:	03 c0       	rjmp	.+6      	; 0x3078 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3072:	8b 81       	ldd	r24, Y+3	; 0x03
    3074:	80 5b       	subi	r24, 0xB0	; 176
    3076:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3078:	89 81       	ldd	r24, Y+1	; 0x01
    307a:	80 68       	ori	r24, 0x80	; 128
    307c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_sendCommand>
}
    3080:	0f 90       	pop	r0
    3082:	0f 90       	pop	r0
    3084:	0f 90       	pop	r0
    3086:	0f 90       	pop	r0
    3088:	0f 90       	pop	r0
    308a:	cf 91       	pop	r28
    308c:	df 91       	pop	r29
    308e:	08 95       	ret

00003090 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3090:	df 93       	push	r29
    3092:	cf 93       	push	r28
    3094:	00 d0       	rcall	.+0      	; 0x3096 <LCD_displayStringRowColumn+0x6>
    3096:	00 d0       	rcall	.+0      	; 0x3098 <LCD_displayStringRowColumn+0x8>
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62
    309c:	89 83       	std	Y+1, r24	; 0x01
    309e:	6a 83       	std	Y+2, r22	; 0x02
    30a0:	5c 83       	std	Y+4, r21	; 0x04
    30a2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	6a 81       	ldd	r22, Y+2	; 0x02
    30a8:	0e 94 06 18 	call	0x300c	; 0x300c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    30ac:	8b 81       	ldd	r24, Y+3	; 0x03
    30ae:	9c 81       	ldd	r25, Y+4	; 0x04
    30b0:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_displayString>
}
    30b4:	0f 90       	pop	r0
    30b6:	0f 90       	pop	r0
    30b8:	0f 90       	pop	r0
    30ba:	0f 90       	pop	r0
    30bc:	cf 91       	pop	r28
    30be:	df 91       	pop	r29
    30c0:	08 95       	ret

000030c2 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    30c2:	df 93       	push	r29
    30c4:	cf 93       	push	r28
    30c6:	cd b7       	in	r28, 0x3d	; 61
    30c8:	de b7       	in	r29, 0x3e	; 62
    30ca:	62 97       	sbiw	r28, 0x12	; 18
    30cc:	0f b6       	in	r0, 0x3f	; 63
    30ce:	f8 94       	cli
    30d0:	de bf       	out	0x3e, r29	; 62
    30d2:	0f be       	out	0x3f, r0	; 63
    30d4:	cd bf       	out	0x3d, r28	; 61
    30d6:	9a 8b       	std	Y+18, r25	; 0x12
    30d8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    30da:	89 89       	ldd	r24, Y+17	; 0x11
    30dc:	9a 89       	ldd	r25, Y+18	; 0x12
    30de:	9e 01       	movw	r18, r28
    30e0:	2f 5f       	subi	r18, 0xFF	; 255
    30e2:	3f 4f       	sbci	r19, 0xFF	; 255
    30e4:	b9 01       	movw	r22, r18
    30e6:	4a e0       	ldi	r20, 0x0A	; 10
    30e8:	50 e0       	ldi	r21, 0x00	; 0
    30ea:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <itoa>
   LCD_displayString(buff); /* Display the string */
    30ee:	ce 01       	movw	r24, r28
    30f0:	01 96       	adiw	r24, 0x01	; 1
    30f2:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_displayString>
}
    30f6:	62 96       	adiw	r28, 0x12	; 18
    30f8:	0f b6       	in	r0, 0x3f	; 63
    30fa:	f8 94       	cli
    30fc:	de bf       	out	0x3e, r29	; 62
    30fe:	0f be       	out	0x3f, r0	; 63
    3100:	cd bf       	out	0x3d, r28	; 61
    3102:	cf 91       	pop	r28
    3104:	df 91       	pop	r29
    3106:	08 95       	ret

00003108 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3108:	df 93       	push	r29
    310a:	cf 93       	push	r28
    310c:	cd b7       	in	r28, 0x3d	; 61
    310e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_sendCommand>
}
    3116:	cf 91       	pop	r28
    3118:	df 91       	pop	r29
    311a:	08 95       	ret

0000311c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    311c:	df 93       	push	r29
    311e:	cf 93       	push	r28
    3120:	00 d0       	rcall	.+0      	; 0x3122 <UART_init+0x6>
    3122:	00 d0       	rcall	.+0      	; 0x3124 <UART_init+0x8>
    3124:	cd b7       	in	r28, 0x3d	; 61
    3126:	de b7       	in	r29, 0x3e	; 62
    3128:	9c 83       	std	Y+4, r25	; 0x04
    312a:	8b 83       	std	Y+3, r24	; 0x03
	UCSRA=(1<<U2X);
    312c:	eb e2       	ldi	r30, 0x2B	; 43
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	82 e0       	ldi	r24, 0x02	; 2
    3132:	80 83       	st	Z, r24
	UCSRB=(1<<RXEN)|(1<<TXEN);
    3134:	ea e2       	ldi	r30, 0x2A	; 42
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	88 e1       	ldi	r24, 0x18	; 24
    313a:	80 83       	st	Z, r24
	UCSRC=(1<<URSEL)|(Config_Ptr->parity<<4)|(Config_Ptr->stop_bit<<3)|(Config_Ptr->bit_data<<1);
    313c:	a0 e4       	ldi	r26, 0x40	; 64
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	eb 81       	ldd	r30, Y+3	; 0x03
    3142:	fc 81       	ldd	r31, Y+4	; 0x04
    3144:	81 81       	ldd	r24, Z+1	; 0x01
    3146:	88 2f       	mov	r24, r24
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	82 95       	swap	r24
    314c:	92 95       	swap	r25
    314e:	90 7f       	andi	r25, 0xF0	; 240
    3150:	98 27       	eor	r25, r24
    3152:	80 7f       	andi	r24, 0xF0	; 240
    3154:	98 27       	eor	r25, r24
    3156:	28 2f       	mov	r18, r24
    3158:	20 68       	ori	r18, 0x80	; 128
    315a:	eb 81       	ldd	r30, Y+3	; 0x03
    315c:	fc 81       	ldd	r31, Y+4	; 0x04
    315e:	82 81       	ldd	r24, Z+2	; 0x02
    3160:	88 2f       	mov	r24, r24
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	88 0f       	add	r24, r24
    3166:	99 1f       	adc	r25, r25
    3168:	88 0f       	add	r24, r24
    316a:	99 1f       	adc	r25, r25
    316c:	88 0f       	add	r24, r24
    316e:	99 1f       	adc	r25, r25
    3170:	28 2b       	or	r18, r24
    3172:	eb 81       	ldd	r30, Y+3	; 0x03
    3174:	fc 81       	ldd	r31, Y+4	; 0x04
    3176:	80 81       	ld	r24, Z
    3178:	88 2f       	mov	r24, r24
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	88 0f       	add	r24, r24
    317e:	99 1f       	adc	r25, r25
    3180:	82 2b       	or	r24, r18
    3182:	8c 93       	st	X, r24
	uint16 BaudRate=(uint16)((F_CPU / (Config_Ptr->baud_rate * 8)) - 1);
    3184:	eb 81       	ldd	r30, Y+3	; 0x03
    3186:	fc 81       	ldd	r31, Y+4	; 0x04
    3188:	83 81       	ldd	r24, Z+3	; 0x03
    318a:	94 81       	ldd	r25, Z+4	; 0x04
    318c:	88 0f       	add	r24, r24
    318e:	99 1f       	adc	r25, r25
    3190:	88 0f       	add	r24, r24
    3192:	99 1f       	adc	r25, r25
    3194:	88 0f       	add	r24, r24
    3196:	99 1f       	adc	r25, r25
    3198:	9c 01       	movw	r18, r24
    319a:	40 e0       	ldi	r20, 0x00	; 0
    319c:	50 e0       	ldi	r21, 0x00	; 0
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	92 e1       	ldi	r25, 0x12	; 18
    31a2:	aa e7       	ldi	r26, 0x7A	; 122
    31a4:	b0 e0       	ldi	r27, 0x00	; 0
    31a6:	bc 01       	movw	r22, r24
    31a8:	cd 01       	movw	r24, r26
    31aa:	0e 94 80 19 	call	0x3300	; 0x3300 <__udivmodsi4>
    31ae:	da 01       	movw	r26, r20
    31b0:	c9 01       	movw	r24, r18
    31b2:	01 97       	sbiw	r24, 0x01	; 1
    31b4:	9a 83       	std	Y+2, r25	; 0x02
    31b6:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=BaudRate;
    31b8:	e9 e2       	ldi	r30, 0x29	; 41
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
    31be:	80 83       	st	Z, r24
	UBRRH=(BaudRate>>8);
    31c0:	e0 e4       	ldi	r30, 0x40	; 64
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	9a 81       	ldd	r25, Y+2	; 0x02
    31c8:	89 2f       	mov	r24, r25
    31ca:	99 27       	eor	r25, r25
    31cc:	80 83       	st	Z, r24
}
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	0f 90       	pop	r0
    31d6:	cf 91       	pop	r28
    31d8:	df 91       	pop	r29
    31da:	08 95       	ret

000031dc <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    31dc:	df 93       	push	r29
    31de:	cf 93       	push	r28
    31e0:	0f 92       	push	r0
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
    31e6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    31e8:	eb e2       	ldi	r30, 0x2B	; 43
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	80 81       	ld	r24, Z
    31ee:	88 2f       	mov	r24, r24
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	80 72       	andi	r24, 0x20	; 32
    31f4:	90 70       	andi	r25, 0x00	; 0
    31f6:	00 97       	sbiw	r24, 0x00	; 0
    31f8:	b9 f3       	breq	.-18     	; 0x31e8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    31fa:	ec e2       	ldi	r30, 0x2C	; 44
    31fc:	f0 e0       	ldi	r31, 0x00	; 0
    31fe:	89 81       	ldd	r24, Y+1	; 0x01
    3200:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3202:	0f 90       	pop	r0
    3204:	cf 91       	pop	r28
    3206:	df 91       	pop	r29
    3208:	08 95       	ret

0000320a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    320a:	df 93       	push	r29
    320c:	cf 93       	push	r28
    320e:	cd b7       	in	r28, 0x3d	; 61
    3210:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3212:	eb e2       	ldi	r30, 0x2B	; 43
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	80 81       	ld	r24, Z
    3218:	88 23       	and	r24, r24
    321a:	dc f7       	brge	.-10     	; 0x3212 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    321c:	ec e2       	ldi	r30, 0x2C	; 44
    321e:	f0 e0       	ldi	r31, 0x00	; 0
    3220:	80 81       	ld	r24, Z
}
    3222:	cf 91       	pop	r28
    3224:	df 91       	pop	r29
    3226:	08 95       	ret

00003228 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3228:	df 93       	push	r29
    322a:	cf 93       	push	r28
    322c:	00 d0       	rcall	.+0      	; 0x322e <UART_sendString+0x6>
    322e:	0f 92       	push	r0
    3230:	cd b7       	in	r28, 0x3d	; 61
    3232:	de b7       	in	r29, 0x3e	; 62
    3234:	9b 83       	std	Y+3, r25	; 0x03
    3236:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3238:	19 82       	std	Y+1, r1	; 0x01
    323a:	0e c0       	rjmp	.+28     	; 0x3258 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    323c:	89 81       	ldd	r24, Y+1	; 0x01
    323e:	28 2f       	mov	r18, r24
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	8a 81       	ldd	r24, Y+2	; 0x02
    3244:	9b 81       	ldd	r25, Y+3	; 0x03
    3246:	fc 01       	movw	r30, r24
    3248:	e2 0f       	add	r30, r18
    324a:	f3 1f       	adc	r31, r19
    324c:	80 81       	ld	r24, Z
    324e:	0e 94 ee 18 	call	0x31dc	; 0x31dc <UART_sendByte>
		i++;
    3252:	89 81       	ldd	r24, Y+1	; 0x01
    3254:	8f 5f       	subi	r24, 0xFF	; 255
    3256:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	28 2f       	mov	r18, r24
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	8a 81       	ldd	r24, Y+2	; 0x02
    3260:	9b 81       	ldd	r25, Y+3	; 0x03
    3262:	fc 01       	movw	r30, r24
    3264:	e2 0f       	add	r30, r18
    3266:	f3 1f       	adc	r31, r19
    3268:	80 81       	ld	r24, Z
    326a:	88 23       	and	r24, r24
    326c:	39 f7       	brne	.-50     	; 0x323c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	0f 90       	pop	r0
    3274:	cf 91       	pop	r28
    3276:	df 91       	pop	r29
    3278:	08 95       	ret

0000327a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    327a:	0f 93       	push	r16
    327c:	1f 93       	push	r17
    327e:	df 93       	push	r29
    3280:	cf 93       	push	r28
    3282:	00 d0       	rcall	.+0      	; 0x3284 <UART_receiveString+0xa>
    3284:	0f 92       	push	r0
    3286:	cd b7       	in	r28, 0x3d	; 61
    3288:	de b7       	in	r29, 0x3e	; 62
    328a:	9b 83       	std	Y+3, r25	; 0x03
    328c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    328e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3290:	89 81       	ldd	r24, Y+1	; 0x01
    3292:	28 2f       	mov	r18, r24
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	8a 81       	ldd	r24, Y+2	; 0x02
    3298:	9b 81       	ldd	r25, Y+3	; 0x03
    329a:	8c 01       	movw	r16, r24
    329c:	02 0f       	add	r16, r18
    329e:	13 1f       	adc	r17, r19
    32a0:	0e 94 05 19 	call	0x320a	; 0x320a <UART_recieveByte>
    32a4:	f8 01       	movw	r30, r16
    32a6:	80 83       	st	Z, r24
    32a8:	0f c0       	rjmp	.+30     	; 0x32c8 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	8f 5f       	subi	r24, 0xFF	; 255
    32ae:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    32b0:	89 81       	ldd	r24, Y+1	; 0x01
    32b2:	28 2f       	mov	r18, r24
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	8a 81       	ldd	r24, Y+2	; 0x02
    32b8:	9b 81       	ldd	r25, Y+3	; 0x03
    32ba:	8c 01       	movw	r16, r24
    32bc:	02 0f       	add	r16, r18
    32be:	13 1f       	adc	r17, r19
    32c0:	0e 94 05 19 	call	0x320a	; 0x320a <UART_recieveByte>
    32c4:	f8 01       	movw	r30, r16
    32c6:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    32c8:	89 81       	ldd	r24, Y+1	; 0x01
    32ca:	28 2f       	mov	r18, r24
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	8a 81       	ldd	r24, Y+2	; 0x02
    32d0:	9b 81       	ldd	r25, Y+3	; 0x03
    32d2:	fc 01       	movw	r30, r24
    32d4:	e2 0f       	add	r30, r18
    32d6:	f3 1f       	adc	r31, r19
    32d8:	80 81       	ld	r24, Z
    32da:	83 32       	cpi	r24, 0x23	; 35
    32dc:	31 f7       	brne	.-52     	; 0x32aa <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    32de:	89 81       	ldd	r24, Y+1	; 0x01
    32e0:	28 2f       	mov	r18, r24
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	8a 81       	ldd	r24, Y+2	; 0x02
    32e6:	9b 81       	ldd	r25, Y+3	; 0x03
    32e8:	fc 01       	movw	r30, r24
    32ea:	e2 0f       	add	r30, r18
    32ec:	f3 1f       	adc	r31, r19
    32ee:	10 82       	st	Z, r1
}
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	0f 90       	pop	r0
    32f6:	cf 91       	pop	r28
    32f8:	df 91       	pop	r29
    32fa:	1f 91       	pop	r17
    32fc:	0f 91       	pop	r16
    32fe:	08 95       	ret

00003300 <__udivmodsi4>:
    3300:	a1 e2       	ldi	r26, 0x21	; 33
    3302:	1a 2e       	mov	r1, r26
    3304:	aa 1b       	sub	r26, r26
    3306:	bb 1b       	sub	r27, r27
    3308:	fd 01       	movw	r30, r26
    330a:	0d c0       	rjmp	.+26     	; 0x3326 <__udivmodsi4_ep>

0000330c <__udivmodsi4_loop>:
    330c:	aa 1f       	adc	r26, r26
    330e:	bb 1f       	adc	r27, r27
    3310:	ee 1f       	adc	r30, r30
    3312:	ff 1f       	adc	r31, r31
    3314:	a2 17       	cp	r26, r18
    3316:	b3 07       	cpc	r27, r19
    3318:	e4 07       	cpc	r30, r20
    331a:	f5 07       	cpc	r31, r21
    331c:	20 f0       	brcs	.+8      	; 0x3326 <__udivmodsi4_ep>
    331e:	a2 1b       	sub	r26, r18
    3320:	b3 0b       	sbc	r27, r19
    3322:	e4 0b       	sbc	r30, r20
    3324:	f5 0b       	sbc	r31, r21

00003326 <__udivmodsi4_ep>:
    3326:	66 1f       	adc	r22, r22
    3328:	77 1f       	adc	r23, r23
    332a:	88 1f       	adc	r24, r24
    332c:	99 1f       	adc	r25, r25
    332e:	1a 94       	dec	r1
    3330:	69 f7       	brne	.-38     	; 0x330c <__udivmodsi4_loop>
    3332:	60 95       	com	r22
    3334:	70 95       	com	r23
    3336:	80 95       	com	r24
    3338:	90 95       	com	r25
    333a:	9b 01       	movw	r18, r22
    333c:	ac 01       	movw	r20, r24
    333e:	bd 01       	movw	r22, r26
    3340:	cf 01       	movw	r24, r30
    3342:	08 95       	ret

00003344 <__prologue_saves__>:
    3344:	2f 92       	push	r2
    3346:	3f 92       	push	r3
    3348:	4f 92       	push	r4
    334a:	5f 92       	push	r5
    334c:	6f 92       	push	r6
    334e:	7f 92       	push	r7
    3350:	8f 92       	push	r8
    3352:	9f 92       	push	r9
    3354:	af 92       	push	r10
    3356:	bf 92       	push	r11
    3358:	cf 92       	push	r12
    335a:	df 92       	push	r13
    335c:	ef 92       	push	r14
    335e:	ff 92       	push	r15
    3360:	0f 93       	push	r16
    3362:	1f 93       	push	r17
    3364:	cf 93       	push	r28
    3366:	df 93       	push	r29
    3368:	cd b7       	in	r28, 0x3d	; 61
    336a:	de b7       	in	r29, 0x3e	; 62
    336c:	ca 1b       	sub	r28, r26
    336e:	db 0b       	sbc	r29, r27
    3370:	0f b6       	in	r0, 0x3f	; 63
    3372:	f8 94       	cli
    3374:	de bf       	out	0x3e, r29	; 62
    3376:	0f be       	out	0x3f, r0	; 63
    3378:	cd bf       	out	0x3d, r28	; 61
    337a:	09 94       	ijmp

0000337c <__epilogue_restores__>:
    337c:	2a 88       	ldd	r2, Y+18	; 0x12
    337e:	39 88       	ldd	r3, Y+17	; 0x11
    3380:	48 88       	ldd	r4, Y+16	; 0x10
    3382:	5f 84       	ldd	r5, Y+15	; 0x0f
    3384:	6e 84       	ldd	r6, Y+14	; 0x0e
    3386:	7d 84       	ldd	r7, Y+13	; 0x0d
    3388:	8c 84       	ldd	r8, Y+12	; 0x0c
    338a:	9b 84       	ldd	r9, Y+11	; 0x0b
    338c:	aa 84       	ldd	r10, Y+10	; 0x0a
    338e:	b9 84       	ldd	r11, Y+9	; 0x09
    3390:	c8 84       	ldd	r12, Y+8	; 0x08
    3392:	df 80       	ldd	r13, Y+7	; 0x07
    3394:	ee 80       	ldd	r14, Y+6	; 0x06
    3396:	fd 80       	ldd	r15, Y+5	; 0x05
    3398:	0c 81       	ldd	r16, Y+4	; 0x04
    339a:	1b 81       	ldd	r17, Y+3	; 0x03
    339c:	aa 81       	ldd	r26, Y+2	; 0x02
    339e:	b9 81       	ldd	r27, Y+1	; 0x01
    33a0:	ce 0f       	add	r28, r30
    33a2:	d1 1d       	adc	r29, r1
    33a4:	0f b6       	in	r0, 0x3f	; 63
    33a6:	f8 94       	cli
    33a8:	de bf       	out	0x3e, r29	; 62
    33aa:	0f be       	out	0x3f, r0	; 63
    33ac:	cd bf       	out	0x3d, r28	; 61
    33ae:	ed 01       	movw	r28, r26
    33b0:	08 95       	ret

000033b2 <itoa>:
    33b2:	fb 01       	movw	r30, r22
    33b4:	9f 01       	movw	r18, r30
    33b6:	e8 94       	clt
    33b8:	42 30       	cpi	r20, 0x02	; 2
    33ba:	c4 f0       	brlt	.+48     	; 0x33ec <itoa+0x3a>
    33bc:	45 32       	cpi	r20, 0x25	; 37
    33be:	b4 f4       	brge	.+44     	; 0x33ec <itoa+0x3a>
    33c0:	4a 30       	cpi	r20, 0x0A	; 10
    33c2:	29 f4       	brne	.+10     	; 0x33ce <itoa+0x1c>
    33c4:	97 fb       	bst	r25, 7
    33c6:	1e f4       	brtc	.+6      	; 0x33ce <itoa+0x1c>
    33c8:	90 95       	com	r25
    33ca:	81 95       	neg	r24
    33cc:	9f 4f       	sbci	r25, 0xFF	; 255
    33ce:	64 2f       	mov	r22, r20
    33d0:	77 27       	eor	r23, r23
    33d2:	0e 94 0a 1a 	call	0x3414	; 0x3414 <__udivmodhi4>
    33d6:	80 5d       	subi	r24, 0xD0	; 208
    33d8:	8a 33       	cpi	r24, 0x3A	; 58
    33da:	0c f0       	brlt	.+2      	; 0x33de <itoa+0x2c>
    33dc:	89 5d       	subi	r24, 0xD9	; 217
    33de:	81 93       	st	Z+, r24
    33e0:	cb 01       	movw	r24, r22
    33e2:	00 97       	sbiw	r24, 0x00	; 0
    33e4:	a1 f7       	brne	.-24     	; 0x33ce <itoa+0x1c>
    33e6:	16 f4       	brtc	.+4      	; 0x33ec <itoa+0x3a>
    33e8:	5d e2       	ldi	r21, 0x2D	; 45
    33ea:	51 93       	st	Z+, r21
    33ec:	10 82       	st	Z, r1
    33ee:	c9 01       	movw	r24, r18
    33f0:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <strrev>

000033f4 <strrev>:
    33f4:	dc 01       	movw	r26, r24
    33f6:	fc 01       	movw	r30, r24
    33f8:	67 2f       	mov	r22, r23
    33fa:	71 91       	ld	r23, Z+
    33fc:	77 23       	and	r23, r23
    33fe:	e1 f7       	brne	.-8      	; 0x33f8 <strrev+0x4>
    3400:	32 97       	sbiw	r30, 0x02	; 2
    3402:	04 c0       	rjmp	.+8      	; 0x340c <strrev+0x18>
    3404:	7c 91       	ld	r23, X
    3406:	6d 93       	st	X+, r22
    3408:	70 83       	st	Z, r23
    340a:	62 91       	ld	r22, -Z
    340c:	ae 17       	cp	r26, r30
    340e:	bf 07       	cpc	r27, r31
    3410:	c8 f3       	brcs	.-14     	; 0x3404 <strrev+0x10>
    3412:	08 95       	ret

00003414 <__udivmodhi4>:
    3414:	aa 1b       	sub	r26, r26
    3416:	bb 1b       	sub	r27, r27
    3418:	51 e1       	ldi	r21, 0x11	; 17
    341a:	07 c0       	rjmp	.+14     	; 0x342a <__udivmodhi4_ep>

0000341c <__udivmodhi4_loop>:
    341c:	aa 1f       	adc	r26, r26
    341e:	bb 1f       	adc	r27, r27
    3420:	a6 17       	cp	r26, r22
    3422:	b7 07       	cpc	r27, r23
    3424:	10 f0       	brcs	.+4      	; 0x342a <__udivmodhi4_ep>
    3426:	a6 1b       	sub	r26, r22
    3428:	b7 0b       	sbc	r27, r23

0000342a <__udivmodhi4_ep>:
    342a:	88 1f       	adc	r24, r24
    342c:	99 1f       	adc	r25, r25
    342e:	5a 95       	dec	r21
    3430:	a9 f7       	brne	.-22     	; 0x341c <__udivmodhi4_loop>
    3432:	80 95       	com	r24
    3434:	90 95       	com	r25
    3436:	bc 01       	movw	r22, r24
    3438:	cd 01       	movw	r24, r26
    343a:	08 95       	ret

0000343c <_exit>:
    343c:	f8 94       	cli

0000343e <__stop_program>:
    343e:	ff cf       	rjmp	.-2      	; 0x343e <__stop_program>
